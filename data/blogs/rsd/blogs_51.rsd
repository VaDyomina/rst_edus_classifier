1	http://sergeyteplyakov.blogspot.com/2013/09/blog-post_24.html	_	_	_	_	0	ROOT	_	_
2	Культ карго в программировании	_	_	_	_	0	ROOT	_	_
3	Замечали ли вы за собой, своими коллегами или друзьями одну интересную особенность:	_	_	_	_	0	ROOT	_	_
4	когда у кого-то начинает что-либо хорошо получаться,	_	_	_	_	5	cause_r	_	_
5	то почти всегда найдутся «подражатели», которые попытаются повторить тот же самый успех, путем копирования видимых действий оригинала?	_	_	_	_	3	elaboration_r	_	_
6	При этом обычно, это подражание ни к чему не приводит,	_	_	_	_	3	joint_m	_	_
7	поскольку «подражатель» начинает копировать лишь несколько видимых аспектов,	_	_	_	_	6	cause_r	_	_
8	без понимания всех внутренних причин успеха.	_	_	_	_	7	condition_r	_	_
9	Первые примеры такого подражания легко увидеть у детей или подростков.	_	_	_	_	10	preparation_r	_	_
10	Вспомните, как мы встречались мальчишками осенью	_	_	_	_	12	cause_r	_	_
11	и кто-то начинал хвастаться своими бицепсами.	_	_	_	_	10	joint_m	_	_
12	Сразу же вокруг него соберется группа однокашников, страстно желающих узнать рецепт успеха.	_	_	_	_	0	ROOT	_	_
13	При этом самое смешное, наблюдать, как избирательно работает наш мозг,	_	_	_	_	12	joint_m	_	_
14	который воспринимает лишь то, что мы хотим услышать.	_	_	_	_	13	elaboration_r	_	_
15	Так во фразе: "я тренировался на турнике каждый день по 40 минут в течении трех месяцев", мы услышим лишь «тренировался на турнике»	_	_	_	_	16	cause_r	_	_
16	и будем озадачены отсутствием результата через неделю,	_	_	_	_	13	evidence_r	_	_
17	подтянувшись за все это время 4 раза.	_	_	_	_	16	condition_r	_	_
18	"А, турник – это не для меня!	_	_	_	_	16	sequence_m	_	_
19	У меня мышцы спины слабые"	_	_	_	_	18	cause_r	_	_
20	("руки слишком длинные",	_	_	_	_	19	joint_m	_	_
21	"турник во дворе кривой",	_	_	_	_	19	joint_m	_	_
22	"нет подходящих перчаток" и т.п.), услышим мы через неделю,	_	_	_	_	19	joint_m	_	_
23	когда энтузиазм ребят начнет спадать.	_	_	_	_	19	cause_r	_	_
24	Однако с аналогичной ситуацией сталкиваются не только подростки, но и вполне себе зрелые люди, занимающиеся, например, разработкой ПО.	_	_	_	_	0	ROOT	_	_
25	Поскольку успех проекта – дело не простое,	_	_	_	_	26	cause_r	_	_
26	то не удивительно, что индустрия и отдельные ее участники начинают подражать успешным командам.	_	_	_	_	24	elaboration_r	_	_
27	Но и в этом случае следование чужим советам и слепое копирование чужих практик редко приводит	_	_	_	_	28	cause_r	_	_
28	к успеху.	_	_	_	_	26	contrast_m	_	_
29	Как и тот подросток, добившийся успеха на турнике, успешная команда разработчиков, приходят к применению новых подходов постепенно и сознательно,	_	_	_	_	28	comparison_m	_	_
30	понимая с какими проблемами они столкнулись	_	_	_	_	29	cause_r	_	_
31	и какие для этого есть подходящие решения.	_	_	_	_	30	joint_m	_	_
32	Совет об использовании нового подхода или инструмента будет воспринят на порядок лучше,	_	_	_	_	0	ROOT	_	_
33	если будет ложится на подготовленную почву – на соответствующий опыт.	_	_	_	_	32	condition_r	_	_
34	Прежде чем слепо браться за новый язык программирования	_	_	_	_	35	condition_r	_	_
35	нужно понимать, чем не устраивает текущий.	_	_	_	_	32	elaboration_r	_	_
36	Нужно понимать, в чем заключается проблема	_	_	_	_	37	cause_r	_	_
37	и только после этого, путем проб и ошибок стоит искать подходящее решение.	_	_	_	_	35	sequence_m	_	_
38	Чужой опыт невероятно полезен,	_	_	_	_	35	contrast_m	_	_
39	но попытка перепрыгнуть через несколько ступенек эволюции	_	_	_	_	40	cause_r	_	_
40	может привести к противоположным результатам.	_	_	_	_	38	contrast_m	_	_
41	Давайте рассмотрим следующий пример.	_	_	_	_	0	ROOT	_	_
42	Предположим, мы хотим начать использовать новые асинхронные возможности языка C# (async/await)	_	_	_	_	41	elaboration_r	_	_
43	или хотим поделиться своим успешным опытом использования этой штуки в своем проекте.	_	_	_	_	42	joint_m	_	_
44	С одной стороны, мы можем начать расписывать все радости этой async-ов и await-ов	_	_	_	_	45	cause_r	_	_
45	и убедить команду в том, что это именно та возможность,	_	_	_	_	41	elaboration_r	_	_
46	отсутствие которой не позволяло вовремя сдать ваши проекты.	_	_	_	_	45	elaboration_r	_	_
47	Но можно подойти с другой стороны.	_	_	_	_	45	contrast_m	_	_
48	Когда я рассказываю об асинхронном программировании,	_	_	_	_	49	condition_r	_	_
49	я прежде всего говорю о преимуществах и недостатках синхронной и асинхронной модели программирования,	_	_	_	_	0	ROOT	_	_
50	а потом рассказываю об эволюции паттернов асинхронного программирования на платформе .NET:	_	_	_	_	49	sequence_m	_	_
51	начиная от APM, через EAP, к TAP и потом уже к async/await.	_	_	_	_	50	elaboration_r	_	_
52	При этом я стараюсь убедить слушателей (или своих коллег), что async/await – это лишь вершина айсберга	_	_	_	_	49	joint_m	_	_
53	и вам понадобиться понимание всех аспектов, на которых эти возможности построены (такие как Synchronization Context, TPL и многие.).	_	_	_	_	52	joint_m	_	_
54	Попытка разобраться с подобным инструментом с наскока	_	_	_	_	55	cause_r	_	_
55	приведет к тому, что появятся различные фобии и комплексы:	_	_	_	_	0	ROOT	_	_
56	"async/await – это плохо,	_	_	_	_	55	elaboration_r	_	_
57	поскольку из-за этого страдает производительность",	_	_	_	_	56	cause_r	_	_
58	"async/await не стоит использовать,	_	_	_	_	56	joint_m	_	_
59	поскольку это усложняет обработку ошибок" и т.п.	_	_	_	_	58	cause_r	_	_
60	Эти замечания вполне обоснованы,	_	_	_	_	55	evaluation_r	_	_
61	но говорят они не столько о проблемах async-ов, сколько о недопонимании принципов этой возможности и истории ее возникновения.	_	_	_	_	60	contrast_m	_	_
62	Подход "а давайте быстренько внедрим вот эту новую штуку" приводит	_	_	_	_	63	cause_r	_	_
63	к возникновению известного "бага" в поведении,	_	_	_	_	0	ROOT	_	_
64	известного нынче под именем культа карго,	_	_	_	_	63	elaboration_r	_	_
65	автором которого является Ричард Фейнман	_	_	_	_	64	attribution_r	_	_
66	(который описывал его в контексте науки,	_	_	_	_	65	elaboration_r	_	_
67	но он применим и к другим областям, таким как разработка ПО):	_	_	_	_	66	contrast_m	_	_
68	"У народностей, населяющих регионы южных морей, бытует «культ карго».	_	_	_	_	69	preparation_r	_	_
69	В войну к ним прилетали самолеты с массой полезных вещей.	_	_	_	_	63	elaboration_r	_	_
70	Теперь люди хотят,	_	_	_	_	72	cause_r	_	_
71	чтобы так было опять.	_	_	_	_	70	purpose_r	_	_
72	Поэтому они устраивают некое подобие взлетно-посадочной полосы,	_	_	_	_	69	sequence_m	_	_
73	вдоль нее разжигают костры,	_	_	_	_	72	sequence_m	_	_
74	строят будку, в которой сидит человек, изображающий диспетчера (с деревяшками вместо наушников и бамбуковыми палочками-антеннами),	_	_	_	_	72	sequence_m	_	_
75	и ждут приземления самолета.	_	_	_	_	72	sequence_m	_	_
76	Они все делают как нужно.	_	_	_	_	69	evaluation_r	_	_
77	По форме все правильно.	_	_	_	_	76	elaboration_r	_	_
78	Все выглядит так, как было раньше.	_	_	_	_	77	joint_m	_	_
79	Вот только самолеты не приземляются.	_	_	_	_	76	contrast_m	_	_
80	Я называю такие вещи наукой «культа карго» (наукой самолетопоклонников):	_	_	_	_	69	joint_m	_	_
81	соблюдаются все внешние признаки и рецепты научного исследования,	_	_	_	_	80	elaboration_r	_	_
82	но нет чего-то очень важного,	_	_	_	_	81	contrast_m	_	_
83	потому что самолеты так и не приземляются."	_	_	_	_	82	cause_r	_	_
84	Хорошей иллюстрацией карго культа является байка про пять обезьян,	_	_	_	_	63	joint_m	_	_
85	которые в конечном итоге стали бояться достать бананы,	_	_	_	_	84	elaboration_r	_	_
86	хотя и никто из них уже и не знал, что будет плохого,	_	_	_	_	85	concession_r	_	_
87	если они попытаются это сделать.	_	_	_	_	86	condition_r	_	_
88	IMG	_	_	_	_	63	elaboration_r	_	_
89	Недопонимание могут приводить	_	_	_	_	90	cause_r	_	_
90	к появлению специальных стандартов кодирования	_	_	_	_	0	ROOT	_	_
91	(если речь идет о языках программирования и библиотеках)	_	_	_	_	90	condition_r	_	_
92	или изменению процессов разработки таким образом,	_	_	_	_	90	same-unit_m	_	_
93	чтобы уберечься от несуществующих проблем	_	_	_	_	90	purpose_r	_	_
94	или использовать якобы наиболее передовые техники и методики.	_	_	_	_	93	joint_m	_	_
95	Так, можно встретить целые команды, в которых нельзя использовать цикл foreach в языке C#,	_	_	_	_	112	solutionhood_r	_	_
96	только потому, что некоторый авторитетный товарищ из этой команды 10 лет назад прочитал вумную статью,	_	_	_	_	95	cause_r	_	_
97	в которой говорилось, что пустой цикл foreach аж-но в 3 раза медленнее пустого цикла for.	_	_	_	_	96	elaboration_r	_	_
98	Или можно встретить команды,	_	_	_	_	95	joint_m	_	_
99	в которых для каждого класса требуется написать интерфейс,	_	_	_	_	98	elaboration_r	_	_
100	и обязательно использовать DI-контейнер якобы	_	_	_	_	99	joint_m	_	_
101	для улучшения дизайна.	_	_	_	_	100	purpose_r	_	_
102	При этом вся команда плюется,	_	_	_	_	95	joint_m	_	_
103	потому что разобраться в коде невозможно,	_	_	_	_	102	cause_r	_	_
104	написание юнит-теста занимает полдня,	_	_	_	_	103	joint_m	_	_
105	каждое изменение ломает два десятка этих самых тестов,	_	_	_	_	103	joint_m	_	_
106	а добавление даже самой маленькой возможности требует невероятных усилий.	_	_	_	_	103	joint_m	_	_
107	Часть команды чувствует, что здесь что-то не так,	_	_	_	_	102	evaluation_r	_	_
108	но боится выглядеть белой вороной на фоне остальных.	_	_	_	_	107	contrast_m	_	_
109	Многие понимают, что идет подмена понятий	_	_	_	_	107	joint_m	_	_
110	и IoC отождествляется с хорошим дизайном,	_	_	_	_	109	joint_m	_	_
111	хотя на самом деле контейнер лишь инструмент, а не самоцель.	_	_	_	_	110	concession_r	_	_
112	Как и с турником,	_	_	_	_	0	ROOT	_	_
113	чтобы добиться успеха в разработке ПО,	_	_	_	_	114	purpose_r	_	_
114	нам нужно не просто слепо перенимать чьи-то подходы,	_	_	_	_	112	same-unit_m	_	_
115	а критически их анализировать.	_	_	_	_	114	contrast_m	_	_
116	Это не значит, что не нужно использовать чужой опыт и признавать авторитеты,	_	_	_	_	112	elaboration_r	_	_
117	это лишь значит, что время от времени нужно пересматривать свои подходы	_	_	_	_	116	contrast_m	_	_
118	и смотреть, не изменилось ли ваше к ним отношение за прошедшее время.	_	_	_	_	117	joint_m	_	_
119	З.Ы. Многие, скорее всего, слышали такое высказывание, что если вы смотрите на свой код годичной давности,	_	_	_	_	121	condition_r	_	_
120	и не считаете его го#%$-кодом,	_	_	_	_	119	joint_m	_	_
121	то это значит, что вы остановились в своем развитии.	_	_	_	_	0	ROOT	_	_
122	Я бы не был столь категоричным,	_	_	_	_	124	cause_r	_	_
123	поскольку кодирование пусть и важный, но не единственный аспект разработки ПО.	_	_	_	_	122	cause_r	_	_
124	Поэтому я бы несколько изменил формулировку таким образом:	_	_	_	_	121	evaluation_r	_	_
125	если через год вы не изменили своего мнения хотя бы в одном из аспектов разработки ПО (кодирование, дизайн, архитектура, работа с пользователями, методологии разработки ПО и др),	_	_	_	_	126	condition_r	_	_
126	значит вы остановились в своем развитии.	_	_	_	_	124	elaboration_r	_	_

