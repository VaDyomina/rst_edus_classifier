1	https://habr.com/ru/company/ruvds/blog/460016/	_	_	_	_	0	ROOT	_	_
2	Признаки настоящих программистов-сеньоров и методы их выслеживания в дикой природе	_	_	_	_	0	ROOT	_	_
3	Существует большой разброс в уровнях квалификации разработчиков.	_	_	_	_	8	preparation_r	_	_
4	И то, что называют «сеньорностью», часто ничего не говорит о реальных возможностях программиста.	_	_	_	_	3	joint_m	_	_
5	Что делает некоторых разработчиков объективно лучше других?	_	_	_	_	8	solutionhood_r	_	_
6	Что выделяет их из серой толпы?	_	_	_	_	5	joint_m	_	_
7	Если у программиста есть пять, десять или даже пятнадцать лет «практического опыта»	_	_	_	_	8	condition_r	_	_
8	— это не обязательно гарантирует то, что он является эффективным и продуктивным сеньором.	_	_	_	_	0	ROOT	_	_
9	На самом деле — это даже не значит, что он вообще может так называться.	_	_	_	_	8	contrast_m	_	_
10	Конечно, существуют и такие несчастные, из-за которых за успешными сеньорами, которые обычно немолоды, закрепилась плохая репутация.	_	_	_	_	8	background_r	_	_
11	Но и молодым сеньорам тоже не легче.	_	_	_	_	10	joint_m	_	_
12	Однако существуют определённые черты и знания, общие для разных программистов-сеньоров.	_	_	_	_	10	contrast_m	_	_
13	IMG	_	_	_	_	14	preparation_r	_	_
14	Нельзя сказать, что реальным сеньорам известны какие-то секреты профессионального мастерства.	_	_	_	_	0	ROOT	_	_
15	Они, скорее, отличаются особой структурой знаний, особым мышлением.	_	_	_	_	14	contrast_m	_	_
16	И то и другое поддаётся развитию.	_	_	_	_	15	elaboration_r	_	_
17	Автор материала, перевод которого мы сегодня публикуем, говорит, что хочет рассказать о некоторых признаках, которые помогают отличить настоящего программиста-сеньора от программиста с «сеньорностью».	_	_	_	_	14	joint_m	_	_
18	Парадигмы программирования	_	_	_	_	19	preparation_r	_	_
19	Принципы SOLID, объектно-ориентированное и функциональное программирование — это три парадигмы программирования, три методологии написания чистого кода,	_	_	_	_	0	ROOT	_	_
20	которые составляют значительную часть концептуальных подходов,	_	_	_	_	19	elaboration_r	_	_
21	стоящих за созданием программ.	_	_	_	_	20	elaboration_r	_	_
22	Многие программисты-джуниоры в ходе работы упускают одну важную вещь, которая заключается в том, что программирование — это язык.	_	_	_	_	19	joint_m	_	_
23	Это означает, что программирование — это нечто большее, чем набор неких грамматических правил.	_	_	_	_	22	restatement_m	_	_
24	Это — средство общения,	_	_	_	_	23	contrast_m	_	_
25	явление, которое может быть структурировано множеством способов.	_	_	_	_	24	elaboration_r	_	_
26	Парадигмы программирования помогают	_	_	_	_	22	joint_m	_	_
27	сформировать определённую позицию относительно того, как код воспринимается,	_	_	_	_	26	purpose_r	_	_
28	и того, как он передаёт информацию.	_	_	_	_	27	joint_m	_	_
29	Писать код может кто угодно	_	_	_	_	0	ROOT	_	_
30	— точно так же, как кто угодно может написать сообщение в мессенджере или короткий обзор книги на Amazon.	_	_	_	_	29	comparison_m	_	_
31	Но подобные тексты нельзя поставить на один уровень с романами Стивена Кинга.	_	_	_	_	29	contrast_m	_	_
32	Парадигмы программирования действуют как направляющая сила, стоящая за кодом, который пишут сеньоры.	_	_	_	_	29	comparison_m	_	_
33	Это делает парадигмы похожими на сюжетные структуры, которым следуют авторы художественных произведений.	_	_	_	_	32	elaboration_r	_	_
34	Все языки пронизаны формулами.	_	_	_	_	33	joint_m	_	_
35	Разработчики-сеньоры понимают их на глубоком уровне,	_	_	_	_	33	joint_m	_	_
36	до которого джунам и мидлам ещё только предстоит дойти.	_	_	_	_	35	comparison_m	_	_
37	Способность создавать	_	_	_	_	39	preparation_r	_	_
38	Когда мы впервые приходим в мир циклов for и конструкций if else,	_	_	_	_	39	condition_r	_	_
39	мы задаём вопросы	_	_	_	_	0	ROOT	_	_
40	и пытаемся найти ответы на них в виде кода,	_	_	_	_	39	joint_m	_	_
41	который можно откуда-то скопировать	_	_	_	_	40	elaboration_r	_	_
42	и вставить в свой проект.	_	_	_	_	41	joint_m	_	_
43	Уровень понимания этого кода — это то, чем характеризуется квалификация джуниоров, которые только приступили к работе, и начинающих мидлов.	_	_	_	_	39	elaboration_r	_	_
44	Сеньоры, однако, идут дальше копирования.	_	_	_	_	0	ROOT	_	_
45	Они могут создавать что-то новое и без особенной помощи всемогущего Google.	_	_	_	_	44	elaboration_r	_	_
46	Они знают о том, что делают,	_	_	_	_	45	joint_m	_	_
47	они понимают то, как их решения воздействуют на результаты их работы.	_	_	_	_	46	joint_m	_	_
48	Они могут видеть,	_	_	_	_	45	joint_m	_	_
49	или, по крайней мере, предвидеть нештатные ситуации.	_	_	_	_	48	joint_m	_	_
50	Они понимают проблемы своего кода	_	_	_	_	45	joint_m	_	_
51	и знают о том, как с ними бороться.	_	_	_	_	50	joint_m	_	_
52	Если им что-то неизвестно	_	_	_	_	53	condition_r	_	_
53	— они восполняют пробелы в знаниях,	_	_	_	_	0	ROOT	_	_
54	серьёзно разбираясь в неясных вопросах,	_	_	_	_	53	condition_r	_	_
55	не ограничиваясь лишь их поверхностным изучением.	_	_	_	_	54	contrast_m	_	_
56	Они глубоко понимают все те инструменты, которыми пользуются.	_	_	_	_	54	evaluation_r	_	_
57	Мир кода выглядит в глазах сеньоров не так, как в глазах джунов или мидлов.	_	_	_	_	53	evaluation_r	_	_
58	Объективная критика	_	_	_	_	59	preparation_r	_	_
59	Все отдают предпочтение тому, что они знают.	_	_	_	_	0	ROOT	_	_
60	Джуниоры и мидлы демонстрируют сильную тенденцию к тому, чтобы делать акцент на их собственном опыте, а не на том, что относится к анализируемому ими коду.	_	_	_	_	59	elaboration_r	_	_
61	Если они высказывают некое предложение,	_	_	_	_	63	condition_r	_	_
62	или если они оценивают что-либо	_	_	_	_	61	joint_m	_	_
63	— основой всего этого являются их личные предпочтения.	_	_	_	_	60	evidence_r	_	_
64	Это — стиль написания кода, способы именования сущностей, методы мышления.	_	_	_	_	63	elaboration_r	_	_
65	В этом нет ничего плохого.	_	_	_	_	0	ROOT	_	_
66	Всё это — часть процесса профессионального роста.	_	_	_	_	65	evidence_r	_	_
67	Для того чтобы достичь настоящей объективности суждений,	_	_	_	_	68	purpose_r	_	_
68	программисту нужно побывать во множестве ситуаций	_	_	_	_	70	cause_r	_	_
69	и самому увидеть, как нечто, неприемлемое в одном случае, в другом может оказаться наилучшим решением некоей проблемы.	_	_	_	_	68	joint_m	_	_
70	Это развивает у разработчика нейтральный взгляд на вещи.	_	_	_	_	65	elaboration_r	_	_
71	Нет единственно правильного способа писать код.	_	_	_	_	70	elaboration_r	_	_
72	Есть лишь способы, которые эффективны в определённой ситуации и при определённом сценарии развития событий.	_	_	_	_	71	contrast_m	_	_
73	Программисты-сеньоры это понимают.	_	_	_	_	71	evaluation_r	_	_
74	Они готовы принять то, что их код может и не быть неким «самым лучшим» кодом,	_	_	_	_	73	elaboration_r	_	_
75	и то, что он может быть подвергнуть улучшению.	_	_	_	_	74	joint_m	_	_
76	Сеньоры часто становятся продуктивными контролёрами качества кода,	_	_	_	_	0	ROOT	_	_
77	указывая на беспорядок, который устраивают в программах их коллеги	_	_	_	_	76	cause_r	_	_
78	и отмечая слабые места архитектуры приложений.	_	_	_	_	77	joint_m	_	_
79	Они способны увидеть общую картину проекта,	_	_	_	_	76	elaboration_r	_	_
80	оценить возможность возникновения совершенно неожиданных проблем.	_	_	_	_	79	joint_m	_	_
81	При этом они не привязаны к какому-то стилю написания кода или к какой-то парадигме программирования.	_	_	_	_	79	joint_m	_	_
82	В центре их внимания находятся не инструменты, а результат.	_	_	_	_	81	contrast_m	_	_
83	Разница между хорошей программой и работающей программой	_	_	_	_	84	preparation_r	_	_
84	Разработчики создают код,	_	_	_	_	0	ROOT	_	_
85	главная задача которого — запуститься.	_	_	_	_	84	purpose_r	_	_
86	Некоторые из них останавливаются на этом,	_	_	_	_	84	elaboration_r	_	_
87	и считают, что работающий код — это всё, что им нужно.	_	_	_	_	86	joint_m	_	_
88	Другие идут немного дальше	_	_	_	_	86	comparison_m	_	_
89	и стремятся к тому,	_	_	_	_	88	joint_m	_	_
90	чтобы код был бы не только работающим, но и качественно написанным.	_	_	_	_	89	purpose_r	_	_
91	Лучшие разработчики — это те профессионалы,	_	_	_	_	84	joint_m	_	_
92	которые в процессе работы редактируют	_	_	_	_	91	elaboration_r	_	_
93	и переписывают наш код.	_	_	_	_	92	joint_m	_	_
94	Они могут и согласиться с применением какой-нибудь неудачной конструкции,	_	_	_	_	91	elaboration_r	_	_
95	но как только у них возникнет возможность её исправить	_	_	_	_	96	condition_r	_	_
96	— они это сделают.	_	_	_	_	94	contrast_m	_	_
97	Такие разработчики понимают разницу между хорошей и работающей программой.	_	_	_	_	91	evaluation_r	_	_
98	Большинство руководителей интересует только работоспособность программы.	_	_	_	_	0	ROOT	_	_
99	Но хорошие разработчики-сеньоры видят ситуацию глубже.	_	_	_	_	98	contrast_m	_	_
100	Они понимают скрытую стоимость технического долга	_	_	_	_	99	elaboration_r	_	_
101	и способны распознать код, который указывает на наличие в системе глубинных проблем.	_	_	_	_	100	joint_m	_	_
102	Они знают о том, как совместить потребность бизнеса в работающих программах с качеством кода.	_	_	_	_	100	joint_m	_	_
103	Это позволяет им находить баланс между сдачей проектов в срок и включением в них дополнительных возможностей,	_	_	_	_	100	purpose_r	_	_
104	о которых заказчики проектов вспоминают далеко не в самом начале работы.	_	_	_	_	103	elaboration_r	_	_
105	Широта их знаний, понимание фреймворков и языков программирования, делают их экспертами в вопросе нахождения разницы между программами работающими и программами качественными.	_	_	_	_	106	cause_r	_	_
106	Они умеют создавать и то и другое.	_	_	_	_	107	cause_r	_	_
107	Это даёт настоящим сеньорам возможность находить креативные решения проблем в самых разных ситуациях.	_	_	_	_	103	elaboration_r	_	_
108	Способность учить	_	_	_	_	114	preparation_r	_	_
109	Посредственный учитель излагает.	_	_	_	_	108	joint_m	_	_
110	Хороший учитель объясняет.	_	_	_	_	109	comparison_m	_	_
111	Выдающийся учитель показывает.	_	_	_	_	109	comparison_m	_	_
112	Великий учитель вдохновляет.	_	_	_	_	109	comparison_m	_	_
113	Уильям Артур Уорд	_	_	_	_	109	attribution_r	_	_
114	У настоящих разработчиков-сеньоров есть страсть к технологиям,	_	_	_	_	0	ROOT	_	_
115	которая вдохновляет их менее опытных товарищей,	_	_	_	_	116	cause_r	_	_
116	помогая начинающим становиться профессионалами высочайшего класса.	_	_	_	_	114	elaboration_r	_	_
117	Программирование, само по себе, это набор неких идей.	_	_	_	_	0	ROOT	_	_
118	У сеньоров есть способность сжато и понятно излагать эти идеи.	_	_	_	_	117	elaboration_r	_	_
119	Способность сеньоров переносить код между разными интерфейсами и средами демонстрирует истинное понимание выбранного ими языка программирования.	_	_	_	_	118	evaluation_r	_	_
120	Для того чтобы кого-либо чему-либо учить,	_	_	_	_	121	purpose_r	_	_
121	необходим определённый уровень владения предметом.	_	_	_	_	118	elaboration_r	_	_
122	То, что называют «опытом работы», может выглядеть в резюме программиста как перечень выполненных им проектов, или как время, которое он трудился в разных компаниях.	_	_	_	_	121	elaboration_r	_	_
123	Но возможность учить других — это навык, который доступен лишь тому, кто по-настоящему владеет своим ремеслом.	_	_	_	_	122	contrast_m	_	_
124	Итоги	_	_	_	_	125	preparation_r	_	_
125	Настоящий разработчик-сеньор — это многогранное существо,	_	_	_	_	0	ROOT	_	_
126	которое иногда,	_	_	_	_	125	elaboration_r	_	_
127	если речь идёт об областях, находящихся вне сферы его основной деятельности,	_	_	_	_	128	condition_r	_	_
128	может выглядеть как джун или мидл.	_	_	_	_	126	same-unit_m	_	_
129	Но сеньор обладает мощной базой в области философии программирования.	_	_	_	_	125	contrast_m	_	_
130	Однако вышеприведённые особенности сеньоров — это то, что присутствует в их личностях и в их профессиональных знаниях.	_	_	_	_	131	purpose_r	_	_
131	Это позволяет им осваивать новые технологии быстрее, чем некоему «усреднённому» программисту.	_	_	_	_	125	contrast_m	_	_
132	Часто сеньоры — это люди, которые способны охватить одним взглядом общую картину происходящего.	_	_	_	_	131	background_r	_	_
133	Они способны смотреть на код без предрассудков и суеверий.	_	_	_	_	132	joint_m	_	_
134	Настоящий сеньор будет вести своих товарищей по работе к привычкам создания чистого кода.	_	_	_	_	0	ROOT	_	_
135	При этом он не будет представлять собой разрушительную силу, которая пытается втиснуть всё, с чем сталкивается, в прокрустово ложе собственного опыта.	_	_	_	_	134	joint_m	_	_
136	Этот человек спокойно воспринимает ошибки сослуживцев, да и свои тоже.	_	_	_	_	135	contrast_m	_	_
137	Он стремится учиться	_	_	_	_	136	elaboration_r	_	_
138	и учить на ошибках,	_	_	_	_	137	joint_m	_	_
139	а не унижать менее опытных коллег.	_	_	_	_	137	contrast_m	_	_
140	Разработчик-сеньор может быть человеком любого возраста,	_	_	_	_	134	joint_m	_	_
141	он может прийти из любой отрасли информационных технологий,	_	_	_	_	140	joint_m	_	_
142	его «практический опыт» может исчисляться любым количеством лет.	_	_	_	_	140	joint_m	_	_
143	Главная особенность таких людей заключается в том, что они по-настоящему умеют решать проблемы,	_	_	_	_	140	elaboration_r	_	_
144	и в том, что они способны мыслить в долгосрочной перспективе.	_	_	_	_	143	joint_m	_	_
145	Уважаемые читатели! Если вы занимаетесь подбором кадров в сфере информационных технологий	_	_	_	_	0	ROOT	_	_
146	— просим рассказать нам о том, как вы «выслеживаете» сеньоров.	_	_	_	_	0	ROOT	_	_

