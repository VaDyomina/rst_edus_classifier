1	https://tonsky.livejournal.com/322258.html	_	_	_	_	0	ROOT	_	_
2	ICFPC 2019	_	_	_	_	0	ROOT	_	_
3	В этот понедельник закончился трехдневный марафон под названием ICFPC.	_	_	_	_	0	ROOT	_	_
4	Это такое соревнование, где команды программистов со всего мира пытаются на время как можно лучше решить некую задачу.	_	_	_	_	3	elaboration_r	_	_
5	В этот раз – обход лабиринтов с разным доп. инвентарем.	_	_	_	_	3	elaboration_r	_	_
6	Условия можно прочитать здесь.	_	_	_	_	5	elaboration_r	_	_
7	Это как бы отчет, но на самом деле памятка самому себе на случай,	_	_	_	_	6	elaboration_r	_	_
8	если буду играть еще через год.	_	_	_	_	7	condition_r	_	_
9	Мне очень понравилось.	_	_	_	_	10	evaluation_r	_	_
10	То есть я конечно устал как собака,	_	_	_	_	0	ROOT	_	_
11	но есть что-то приятное в том что этот опыт а) имеет конечную продолжительность,	_	_	_	_	10	contrast_m	_	_
12	а не тянется годами, как основная работа.	_	_	_	_	11	contrast_m	_	_
13	И б) можно полностью отдаться задаче,	_	_	_	_	11	joint_m	_	_
14	не думая о том зачем это все	_	_	_	_	13	condition_r	_	_
15	и что ты делаешь со своей жизнью.	_	_	_	_	14	joint_m	_	_
16	Такой вот повод упоенно фигачить на полной скорости какое-то время,	_	_	_	_	10	elaboration_r	_	_
17	чтобы ветер свистел в ушах.	_	_	_	_	16	evaluation_r	_	_
18	Ну и просто весело.	_	_	_	_	16	joint_m	_	_
19	Очень любопытно посмотреть, чего ты стоишь.	_	_	_	_	20	preparation_r	_	_
20	В голове-то ты мог много себе про себя нафантазировать,	_	_	_	_	0	ROOT	_	_
21	а тут вот объективная реальность, ладдер,	_	_	_	_	22	condition_r	_	_
22	и ты либо можешь компьютер заставить делать что ты хочешь,	_	_	_	_	20	contrast_m	_	_
23	либо не можешь.	_	_	_	_	22	joint_m	_	_
24	Никаких «если бы», никаких «возможно, наверное, мне кажется».	_	_	_	_	22	elaboration_r	_	_
25	Мы довольно посредственно выступили	_	_	_	_	20	evaluation_r	_	_
26	(на момент закрытия 29 место из 142 участвовавших, в лучший свой момент были на пятом).	_	_	_	_	25	evidence_r	_	_
27	IMG Исторический скриншот. Дальше мы сильно сдали	_	_	_	_	26	elaboration_r	_	_
28	Участвовали втроем, я в первый раз.	_	_	_	_	31	preparation_r	_	_
29	Как я понял, средний размер команды ~5 человек,	_	_	_	_	31	background_r	_	_
30	не редкость и восемь встретить.	_	_	_	_	29	joint_m	_	_
31	Втроем у нас довольно хорошо делились области ответственности,	_	_	_	_	0	ROOT	_	_
32	было бы больше	_	_	_	_	33	condition_r	_	_
33	появился бы организационный оверхед (как мне кажется).	_	_	_	_	31	joint_m	_	_
34	Восемь человек я бы вообще офигел менеджить	_	_	_	_	31	comparison_m	_	_
35	и вообще ничего бы не написал, наверное.	_	_	_	_	34	joint_m	_	_
36	С другой стороны, больше рук – можно попробовать больше подходов.	_	_	_	_	34	contrast_m	_	_
37	Можно вложиться в инфрастуктуру. Наверное.	_	_	_	_	36	joint_m	_	_
38	Задача достаточно нетривиальная,	_	_	_	_	0	ROOT	_	_
39	чтобы решить ее до конца было в принципе невозможно.	_	_	_	_	38	purpose_r	_	_
40	Но и не супер-сложная,	_	_	_	_	38	contrast_m	_	_
41	чтобы как-то ее решить можно было бы даже иногда и руками (ну, самые простые примеры).	_	_	_	_	40	purpose_r	_	_
42	Как правило это значит перебор вариантов в каком-то NP-полном поле, соревнование эвристик.	_	_	_	_	38	elaboration_r	_	_
43	IMG Собери бонусы, закрась лабиринт	_	_	_	_	42	elaboration_r	_	_
44	Clojure,	_	_	_	_	48	preparation_r	_	_
45	несмотря на все плюсы языка высокого уровня и быстрого iteration time,	_	_	_	_	46	concession_r	_	_
46	по ощущениям подошла довольно плохо.	_	_	_	_	44	same-unit_m	_	_
47	Потому что все упирается в перформанс.	_	_	_	_	44	cause_r	_	_
48	Можно сколько угодно рассуждать про «глобальные оптимизации против локальных»,	_	_	_	_	0	ROOT	_	_
49	ненавидеть байтоебство,	_	_	_	_	48	joint_m	_	_
50	мыслить как стратег с высоты птичьего полета	_	_	_	_	48	joint_m	_	_
51	и гордиться тем, что не знаешь, как устроен компьютер,	_	_	_	_	48	joint_m	_	_
52	но это все и в императивных языках можно делать.	_	_	_	_	48	contrast_m	_	_
53	Они же не отнимают способности мыслить	_	_	_	_	52	cause_r	_	_
54	и планировать.	_	_	_	_	53	joint_m	_	_
55	Да, механика записи мысли чуть более многословна,	_	_	_	_	56	concession_r	_	_
56	ну зато оно того стоит.	_	_	_	_	52	elaboration_r	_	_
57	Плюс за три дня вы разницы может и не заметите даже.	_	_	_	_	56	joint_m	_	_
58	А вот по перформансу заметите, еще как.	_	_	_	_	48	contrast_m	_	_
59	Как ни крути, а команда, которая обсчитает за условное время X в два раза больше вариантов, чем ее конкурент, будет в топе выше. КАК НИ КРУТИ.	_	_	_	_	58	cause_r	_	_
60	Больше здесь строго лучше.	_	_	_	_	59	elaboration_r	_	_
61	Либо больше итераций, больше вариантов попробовать,	_	_	_	_	60	elaboration_r	_	_
62	либо решения будут более глубокими,	_	_	_	_	63	cause_r	_	_
63	а значит и очков принесут больше.	_	_	_	_	61	joint_m	_	_
64	ICFPC это как раз такой случай,	_	_	_	_	65	condition_r	_	_
65	когда лучше чуть больше устать	_	_	_	_	0	ROOT	_	_
66	но получить программу которая будет нагружать процессор по делу,	_	_	_	_	65	contrast_m	_	_
67	а не только мусор за юзером подбирать.	_	_	_	_	66	contrast_m	_	_
68	К тому же, как ни странно, старые императивные языки может	_	_	_	_	65	joint_m	_	_
69	и не очень легко позволяют до энтерпрайзных масштабов раздувать программы,	_	_	_	_	68	purpose_r	_	_
70	но что-что а бегать по массивам	_	_	_	_	68	contrast_m	_	_
71	и мутировать структуры они похлеще функциональных могут.	_	_	_	_	70	joint_m	_	_
72	Ирония – соревнование приурочено к конференции по функциональному программированию,	_	_	_	_	65	evaluation_r	_	_
73	а побеждают в нем все стабильнее C++ и императивщина.	_	_	_	_	72	contrast_m	_	_
74	IMG Выглядит красиво, жаль вся эта мощь обслуживает всякое говно вроде lazy sequences, primitive boxing, high-order functions вместо того, чтобы решать задачу	_	_	_	_	72	elaboration_r	_	_
75	Сейчас я думаю,	_	_	_	_	65	evaluation_r	_	_
76	что даже если бы мы выбрали просто Java с unboxed примитивами и примитивными массивами,	_	_	_	_	77	condition_r	_	_
77	было бы качественно лучше.	_	_	_	_	75	same-unit_m	_	_
78	C++/OCaml/Rust может быть дали бы еще 1,5-2 раза прирост,	_	_	_	_	75	evidence_r	_	_
79	но это уже не изменило бы ситуацию качественно.	_	_	_	_	78	contrast_m	_	_
80	Но может и нет, цифры так, с потолка.	_	_	_	_	78	contrast_m	_	_
81	Про типизацию – да, было определенное количество багов,	_	_	_	_	0	ROOT	_	_
82	связанных с опечатками и лукапами не в тех структурах.	_	_	_	_	81	cause_r	_	_
83	Конечно типы бы от этого спасли.	_	_	_	_	81	elaboration_r	_	_
84	Но был и интересный момент,	_	_	_	_	85	evaluation_r	_	_
85	когда под конец соревнования понадобилось кардинально поменять интерфейс решателя задач,	_	_	_	_	81	contrast_m	_	_
86	и вот тут отсутствие типов	_	_	_	_	85	elaboration_r	_	_
87	позволило мне зарефакторить решатель,	_	_	_	_	86	purpose_r	_	_
88	оставив генератор (вторую большую часть программы) на старых структурах.	_	_	_	_	86	condition_r	_	_
89	В статически типизированном языке мне пришлось бы рефакторить всю программу целиком,	_	_	_	_	90	cause_r	_	_
90	что съело бы ценное время.	_	_	_	_	81	comparison_m	_	_
91	Конечно, это просто забавный аргумент, курьез,	_	_	_	_	92	evaluation_r	_	_
92	я его привожу тут	_	_	_	_	81	evaluation_r	_	_
93	только потому, что все остальные традиционные скучные примеры традиционно указывают в обратную сторону.	_	_	_	_	92	cause_r	_	_
94	Да, я думаю именно в этой ситуации—сверхинтенсивной коллаборации над одним маленьким сверхчасто редактируемым куском кода—типы бы больше помогли,	_	_	_	_	0	ROOT	_	_
95	чем мешали —	_	_	_	_	94	contrast_m	_	_
96	их нужно немного,	_	_	_	_	94	cause_r	_	_
97	по сути это структуры даже просто, которые спасли бы от глупых опечаток.	_	_	_	_	96	joint_m	_	_
98	В более спокойной обстановке, без цейтнота, оба примера, и опечатки, и рефакторинг, не имели бы такого веса,	_	_	_	_	94	comparison_m	_	_
99	когда есть и тесты, и время сделать все нормально.	_	_	_	_	98	condition_r	_	_
100	Кстати, многие ошибки, которые все-таки у нас были,	_	_	_	_	94	background_r	_	_
101	были связаны с подстановкой переменной того же типа, где никакая система типов бы никого не спасла.	_	_	_	_	100	cause_r	_	_
102	Ну оно и не удивительно,	_	_	_	_	100	evaluation_r	_	_
103	когда у тебя большая часть программы, процентов 90, гоняет инты направо и налево.	_	_	_	_	102	cause_r	_	_
104	Это же алгоритмы.	_	_	_	_	103	cause_r	_	_
105	IMG не с этого хакатона, но смысл такой же	_	_	_	_	100	elaboration_r	_	_
106	Очень важно оказалось докапываться до причин каждой странности.	_	_	_	_	107	preparation_r	_	_
107	Удивительно, на самом деле, насколько программа может как-то работать	_	_	_	_	0	ROOT	_	_
108	и выдавать решения,	_	_	_	_	107	joint_m	_	_
109	имея локальные проблемы и ошибки в каких-то местах.	_	_	_	_	107	condition_r	_	_
110	Почти как нечто живое, выживающее.	_	_	_	_	107	comparison_m	_	_
111	Пару багов мы поймали просто глазами,	_	_	_	_	107	elaboration_r	_	_
112	когда увидели, что бот иногда на пару ходов ведет себя странно,	_	_	_	_	111	condition_r	_	_
113	хотя и решает в итоге все задачи.	_	_	_	_	111	concession_r	_	_
114	IMGлабиринты, генерируемые нашим алгоритмом, имели хорошо узнаваемый вид	_	_	_	_	111	elaboration_r	_	_
115	Очень важна базовая гигиена.	_	_	_	_	123	preparation_r	_	_
116	Ну там код неиспользуемый удалять,	_	_	_	_	115	elaboration_r	_	_
117	переменные нормально называть,	_	_	_	_	116	joint_m	_	_
118	на функции разбивать нормально	_	_	_	_	116	joint_m	_	_
119	где нужно,	_	_	_	_	118	condition_r	_	_
120	не писать по два-три раза почти одно и то же,	_	_	_	_	116	joint_m	_	_
121	если уже написано.	_	_	_	_	120	condition_r	_	_
122	Казалось бы, тоже — хакатон, вы через три дня все это выкините,	_	_	_	_	123	cause_r	_	_
123	так ли это важно?	_	_	_	_	124	solutionhood_r	_	_
124	Вот оказалось что да.	_	_	_	_	0	ROOT	_	_
125	Потому что там где в обычном проекте косяки может через полгода-год всплывут,	_	_	_	_	131	cause_r	_	_
126	здесь если ты что-то поленился,	_	_	_	_	127	condition_r	_	_
127	коллега уже через полчаса об это споткнется.	_	_	_	_	125	contrast_m	_	_
128	Причем споткнется обязательно,	_	_	_	_	127	elaboration_r	_	_
129	потому что кода мало	_	_	_	_	128	cause_r	_	_
130	и все используют всё постоянно.	_	_	_	_	129	joint_m	_	_
131	Так что лучше пять минут потерять,	_	_	_	_	124	evidence_r	_	_
132	но поправить самому,	_	_	_	_	131	contrast_m	_	_
133	пока контекст у тебя в голове,	_	_	_	_	132	condition_r	_	_
134	чем заставить коллег тебя материть	_	_	_	_	131	contrast_m	_	_
135	и тебя же дергать.	_	_	_	_	134	joint_m	_	_
136	Чисто по времени выгоднее. Несмотря на.	_	_	_	_	131	elaboration_r	_	_
137	Пилу нужно точить.	_	_	_	_	140	preparation_r	_	_
138	Как бы ни казалось, что три дня уж без удобств можно прожить,	_	_	_	_	137	elaboration_r	_	_
139	удобства все-таки решают.	_	_	_	_	138	contrast_m	_	_
140	Мы очень страдали от отсутствия визуализатора.	_	_	_	_	0	ROOT	_	_
141	Организаторы предлагали готовый, но в браузере (на ScalaJS кстати),	_	_	_	_	140	cause_r	_	_
142	и это не оч удобно было	_	_	_	_	141	evaluation_r	_	_
143	(для каждого запуска нужно было накликать мышкой	_	_	_	_	142	cause_r	_	_
144	и выбрать два раза через диалог выбора файла два файла).	_	_	_	_	143	joint_m	_	_
145	IMG Визуализатор организаторов	_	_	_	_	141	elaboration_r	_	_
146	IMG ух как же меня бесило выбирать эти файлы каждый раз!	_	_	_	_	141	elaboration_r	_	_
147	Самое большое, чего там не хватало — пошагового реплея, перемотки назад и вперед,	_	_	_	_	151	solutionhood_r	_	_
148	ну и доп информацию тоже иногда хочется какую-то вывести.	_	_	_	_	147	joint_m	_	_
149	Как разбился лабиринт,	_	_	_	_	148	elaboration_r	_	_
150	что думает бот, такое.	_	_	_	_	149	joint_m	_	_
151	Я написал в какой-то момент простой визуализатор через println и clear screen,	_	_	_	_	0	ROOT	_	_
152	он даже мультики показывал типа,	_	_	_	_	151	elaboration_r	_	_
153	но хотелось бы чего-то более удобного и универсального.	_	_	_	_	151	contrast_m	_	_
154	IMG	_	_	_	_	151	elaboration_r	_	_
155	То же самое касается проверок на ошибки, на тупизну,	_	_	_	_	158	preparation_r	_	_
156	на то что задача в принципе дорешивается.	_	_	_	_	155	elaboration_r	_	_
157	Причем желательно	_	_	_	_	158	evaluation_r	_	_
158	чтобы это был код независимый от основной codebase	_	_	_	_	0	ROOT	_	_
159	— какое-то довольно продолжительное время мы отправляли задачи	_	_	_	_	158	cause_r	_	_
160	и не знали, что часть из них тупо не принималась организаторами,	_	_	_	_	159	contrast_m	_	_
161	хотя мы думали, что все решили.	_	_	_	_	160	concession_r	_	_
162	Тесты, конечно, писать некогда.	_	_	_	_	158	joint_m	_	_
163	Но вот ассерты, ассерты помогают.	_	_	_	_	162	contrast_m	_	_
164	Иногда как раз такие странные косяки ловить,	_	_	_	_	163	elaboration_r	_	_
165	когда вроде и все еще работает,	_	_	_	_	167	cause_r	_	_
166	но какое-то ожидание нарушено,	_	_	_	_	165	contrast_m	_	_
167	и значит где-то что-то пошло не так, как ты думал.	_	_	_	_	164	condition_r	_	_
168	IMG	_	_	_	_	164	elaboration_r	_	_
169	Приходить надо было подготовленным.	_	_	_	_	0	ROOT	_	_
170	У ребят, например, из контура, была инфраструктура заготовлена: сервера, гоняющие задачи, сбор ответов, дашборд, сравнение.	_	_	_	_	169	elaboration_r	_	_
171	Мы этого, конечно, не знали,	_	_	_	_	169	contrast_m	_	_
172	у нас в лучшем случае запустил программу на ноуте	_	_	_	_	171	elaboration_r	_	_
173	— в терминал вывалился результат.	_	_	_	_	172	sequence_m	_	_
174	Пик инфраструктуры.	_	_	_	_	172	elaboration_r	_	_
175	Очень пожалел,	_	_	_	_	176	evaluation_r	_	_
176	что не сделали систему сбора и записи всех прогонов,	_	_	_	_	0	ROOT	_	_
177	чтобы из всего массива запусков периодически выбирался бы лучший вариант.	_	_	_	_	176	purpose_r	_	_
178	Ведь если на какой-то специфичной версии алгоритма какая-то специфичная карта особенно удачно решилась,	_	_	_	_	179	condition_r	_	_
179	нет причин не отправлять это решение,	_	_	_	_	176	cause_r	_	_
180	даже если алгоритм потом менялся десять раз.	_	_	_	_	179	condition_r	_	_
181	Ну и сравнивать эффективность решений наглядно было бы полезно	_	_	_	_	179	joint_m	_	_
182	(мы потом похожую штуку сделали,	_	_	_	_	181	elaboration_r	_	_
183	но решения надо было вручную в репозиторий коммитить, такое себе). IMG	_	_	_	_	182	contrast_m	_	_
184	Вторая безусловно полезная штука, которой нам не хватало — центр координации,	_	_	_	_	0	ROOT	_	_
185	который бы следил, какие задачи где считаются,	_	_	_	_	184	purpose_r	_	_
186	и раздавал работу.	_	_	_	_	185	joint_m	_	_
187	Так можно было бы и решать быстрее	_	_	_	_	184	elaboration_r	_	_
188	(запустил на всех ноутах,	_	_	_	_	187	elaboration_r	_	_
189	и задачи считаются разные,	_	_	_	_	188	joint_m	_	_
190	не пересекаются),	_	_	_	_	188	joint_m	_	_
191	и гипотез разных потестировать,	_	_	_	_	187	joint_m	_	_
192	и на дашборд красиво вывести.	_	_	_	_	187	joint_m	_	_
193	Ведь известно заранее, что будет N задач,	_	_	_	_	195	cause_r	_	_
194	у каждой есть вход и выход,	_	_	_	_	193	elaboration_r	_	_
195	инфраструктура под это довольно универсальная получается.	_	_	_	_	187	cause_r	_	_
196	Как правильно распределять силы я пока не понял.	_	_	_	_	199	preparation_r	_	_
197	Я выложился по максимуму в первый день (до 6 утра, на следующий встал в 11)	_	_	_	_	199	cause_r	_	_
198	чтобы как можно больше впихнуть в Lightning Round (первые 24 часа).	_	_	_	_	197	purpose_r	_	_
199	В результате весь второй день был как в тумане	_	_	_	_	204	solutionhood_r	_	_
200	и работалось как на автопилоте.	_	_	_	_	199	joint_m	_	_
201	В третий зашли нормально,	_	_	_	_	199	sequence_m	_	_
202	я переписал алгоритм даже,	_	_	_	_	201	elaboration_r	_	_
203	но тоже было очень тяжело.	_	_	_	_	202	contrast_m	_	_
204	Возможно, здоровый сон каждый день (ну ок, кроме последнего) суммарно дал бы больше эффективности за три дня, чем такое.	_	_	_	_	0	ROOT	_	_
205	IMG Перерыв на обед	_	_	_	_	204	elaboration_r	_	_
206	В целом мне кажется, мы выступили неплохо для первого раза,	_	_	_	_	208	preparation_r	_	_
207	но в целом неудовлетворительно.	_	_	_	_	206	contrast_m	_	_
208	По ощущением наших сил едва хватило,	_	_	_	_	0	ROOT	_	_
209	чтобы выкатить самый простой жадный алгоритм с самым простым lookahead	_	_	_	_	208	purpose_r	_	_
210	и мы даже не преступили к стадии, когда тестировали бы разные гипотезы	_	_	_	_	208	contrast_m	_	_
211	и прочие умные идеи бы пробовали.	_	_	_	_	210	joint_m	_	_
212	То есть просто боролись со сложностью задачи.	_	_	_	_	210	restatement_m	_	_

