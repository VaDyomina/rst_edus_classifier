1	http://wolonter.blogspot.com/2016/06/blog-post_21.html	_	_	_	_	0	ROOT	_	_
2	О менеджерах, тестировщиках и их отношениях	_	_	_	_	0	ROOT	_	_
3	Текст моего выступления на внутренней конференции в Контуре.	_	_	_	_	4	preparation_r	_	_
4	О менеджерах и тестировщиках.	_	_	_	_	10	preparation_r	_	_
5	Ссылка на презентацию	_	_	_	_	4	joint_m	_	_
6	Я недавно работаю в контуре, всего год.	_	_	_	_	10	background_r	_	_
7	Но до сих пор у меня не проходит ощущение новизны,	_	_	_	_	6	contrast_m	_	_
8	как будто я только что пришел месяц.	_	_	_	_	7	comparison_m	_	_
9	Гуда не взгляни - везде необычное. Непонятное.	_	_	_	_	7	evaluation_r	_	_
10	У нас - все очень любят контур, коллег и проект.	_	_	_	_	0	ROOT	_	_
11	Я еще ни в одной компании этого не видел.	_	_	_	_	10	evaluation_r	_	_
12	Когда спрашиваешь о работе	_	_	_	_	13	condition_r	_	_
13	люди начинают рассказывать не о том, что они кладут кирпичи,	_	_	_	_	11	elaboration_r	_	_
14	а о том, что строят красивое здание.	_	_	_	_	13	contrast_m	_	_
15	Я так не умею.	_	_	_	_	13	evaluation_r	_	_
16	Кроме очевидных проблем это дает некоторые преимущества.	_	_	_	_	10	joint_m	_	_
17	Пока я еще не влюбился в это великолепие окончательно,	_	_	_	_	18	condition_r	_	_
18	я могу заметить что-нибудь интересное	_	_	_	_	16	elaboration_r	_	_
19	и сравнить.	_	_	_	_	18	joint_m	_	_
20	Собственно, этим и хотелось бы поделиться.	_	_	_	_	24	preparation_r	_	_
21	Я считаю, что нашел конфликт между менеджером и тестировщиком	_	_	_	_	20	elaboration_r	_	_
22	и сейчас рассмотрю его. С каждой стороны.	_	_	_	_	21	sequence_m	_	_
23	Возможно, у меня даже есть решение.	_	_	_	_	21	evaluation_r	_	_
24	Итак, конфликт.	_	_	_	_	0	ROOT	_	_
25	1. Матерым тестерам мало платят.	_	_	_	_	24	elaboration_r	_	_
26	2. Опытным тестерам вообще-то не за что платить много	_	_	_	_	25	contrast_m	_	_
27	Я думаю, что эту проблему можно решить.	_	_	_	_	28	solutionhood_r	_	_
28	коллизия ожиданий, требований, диалога и немного квалификации.	_	_	_	_	24	evaluation_r	_	_
29	Вообще, я считаю, что менеджер разработки - твой начальник - это очень важное в работе.	_	_	_	_	28	evidence_r	_	_
30	В айти увольняются от начальников.	_	_	_	_	29	elaboration_r	_	_
31	Я еще и нанимаюсь к начальникам.	_	_	_	_	30	contrast_m	_	_
32	И предлагаю страшную штуку.	_	_	_	_	31	joint_m	_	_
33	Работать с ними.	_	_	_	_	32	elaboration_r	_	_
34	Я готовился к докладу.	_	_	_	_	35	preparation_r	_	_
35	Я ходил по менеджерам проектов	_	_	_	_	38	solutionhood_r	_	_
36	и задавал им разные вопросы, типа "А зачем вы наняли тестеров?" "А чего вы от них требуете?"	_	_	_	_	35	joint_m	_	_
37	Еще я спрашивал многих тестировщиков "а что от вас требуют менеджеры?"	_	_	_	_	35	joint_m	_	_
38	И знаете - каждый проект уникален.	_	_	_	_	0	ROOT	_	_
39	И каждый специалист уникален.	_	_	_	_	38	joint_m	_	_
40	И каждый менеджер уникален.	_	_	_	_	38	joint_m	_	_
41	Как снежинки. Уникальные люди-снежинки.	_	_	_	_	38	comparison_m	_	_
42	Я думаю, что если не решить,	_	_	_	_	43	condition_r	_	_
43	то снизить накал можно,	_	_	_	_	0	ROOT	_	_
44	посмотреть на мир с другой стороны.	_	_	_	_	43	joint_m	_	_
45	Я надеюсь, тут вам может помочь моя модель производства.	_	_	_	_	43	joint_m	_	_
46	Я работаю в рамках модели, которую я для себя сформулировал	_	_	_	_	45	elaboration_r	_	_
47	и сейчас попытаюсь поделиться ею с вами.	_	_	_	_	46	joint_m	_	_
48	Группа разработки это черный ящик,	_	_	_	_	43	elaboration_r	_	_
49	в который попадает куча всего,	_	_	_	_	48	elaboration_r	_	_
50	а на выходе вылетают фичи,	_	_	_	_	49	sequence_m	_	_
51	внутри черного ящика - тестеры и разработчики.	_	_	_	_	48	background_r	_	_
52	Продукт черного ящика - фичи	_	_	_	_	48	elaboration_r	_	_
53	Зачем нужен тестировщик:	_	_	_	_	48	comparison_m	_	_
54	тестировщик это такая очень дорогая линейка которую менеджер незадолго до релиза может приложить к фиче.	_	_	_	_	53	solutionhood_r	_	_
55	И заранее совершить управляющее воздействие.	_	_	_	_	54	joint_m	_	_
56	Чего хочет менеджер:	_	_	_	_	48	comparison_m	_	_
57	Отсутствия сюрпризов как минимум	_	_	_	_	56	solutionhood_r	_	_
58	и попасть в окно качества как норма.	_	_	_	_	57	joint_m	_	_
59	Что может	_	_	_	_	56	contrast_m	_	_
60	- отложить	_	_	_	_	59	solutionhood_r	_	_
61	и подвигать окно качества.	_	_	_	_	60	joint_m	_	_
62	В рамках этой модели первое что должен сделать тестировщик на новом проекте	_	_	_	_	0	ROOT	_	_
63	- отрастить себе линейку -	_	_	_	_	62	elaboration_r	_	_
64	научиться искать баги в проекте.	_	_	_	_	62	same-unit_m	_	_
65	Как правило на это тратится от двух дней до полугода	_	_	_	_	62	elaboration_r	_	_
66	и это первое что требуют от тестеров	_	_	_	_	65	joint_m	_	_
67	и это то, за что платят.	_	_	_	_	65	joint_m	_	_
68	Тестировщики нормальные люди.	_	_	_	_	67	evaluation_r	_	_
69	Они помнят, что в начале им давали деньги за то,	_	_	_	_	68	elaboration_r	_	_
70	что они хорошо искали.	_	_	_	_	69	cause_r	_	_
71	И стараются - ищут еще лучше.	_	_	_	_	69	joint_m	_	_
72	Кто работал в проекте с более чем 100 открытых багов?	_	_	_	_	71	elaboration_r	_	_
73	У кого их сейчас болше 100? 200? 300?	_	_	_	_	72	comparison_m	_	_
74	Теперь помните я вас спрашивал про количество открытых багов и сходимость?	_	_	_	_	75	solutionhood_r	_	_
75	Открываю тайну.	_	_	_	_	0	ROOT	_	_
76	У нас с вами не космос, а крайне терпимые к дефектам продукты.	_	_	_	_	75	elaboration_r	_	_
77	В них полно багов	_	_	_	_	76	elaboration_r	_	_
78	и мы принципиально не хотим их исправлять.	_	_	_	_	77	joint_m	_	_
79	Менеджеры это отлично понимают.	_	_	_	_	77	evaluation_r	_	_
80	У каждого есть коридор	_	_	_	_	79	elaboration_r	_	_
81	и именно в него надо попасть.	_	_	_	_	80	joint_m	_	_
82	Лучше - не надо.	_	_	_	_	80	elaboration_r	_	_
83	Лучше - плохо.	_	_	_	_	82	contrast_m	_	_
84	У каждого тестера в истории есть отрицательная сходимость дефектов и сотни незакрытых багов.	_	_	_	_	80	joint_m	_	_
85	Это признак overskill тестера.	_	_	_	_	84	elaboration_r	_	_
86	Ему бы в космическую отрасль,	_	_	_	_	84	evaluation_r	_	_
87	а он у нас и не понимает, что лучше чем коридор качества менеджера - не нужно.	_	_	_	_	86	contrast_m	_	_
88	История.	_	_	_	_	89	preparation_r	_	_
89	Четыре года назад мы вместе с Юлей проводили чистку багов	_	_	_	_	0	ROOT	_	_
90	- снижали когнитивную нагрузку на людей.	_	_	_	_	89	restatement_m	_	_
91	Что мы делали	_	_	_	_	94	cause_r	_	_
92	- мы взяли 300 открытых багов	_	_	_	_	91	elaboration_r	_	_
93	и не глядя закрыли сто.	_	_	_	_	92	sequence_m	_	_
94	Никто не умер.	_	_	_	_	89	elaboration_r	_	_
95	Нагрузка стала ниже.	_	_	_	_	94	joint_m	_	_
96	Но милые и замечательные девочки тестировщицы чуть ли не со слезами на глазах подбегали,	_	_	_	_	94	contrast_m	_	_
97	требовали переоткрытия.	_	_	_	_	96	joint_m	_	_
98	Мы перечеркнули ценность их работы, смысл их деятельности.	_	_	_	_	96	evaluation_r	_	_
99	Выводы:	_	_	_	_	100	preparation_r	_	_
100	менеджеры. Передавайте знания о приоритетах.	_	_	_	_	0	ROOT	_	_
101	Не посылайте тестеров на курсы	_	_	_	_	100	elaboration_r	_	_
102	где учат искать лучше	_	_	_	_	101	elaboration_r	_	_
103	чем вам надо.	_	_	_	_	102	comparison_m	_	_
104	Не поощряйте тщательную проверку там	_	_	_	_	101	joint_m	_	_
105	где она не нужна.	_	_	_	_	104	elaboration_r	_	_
106	Тестировщик должен находить ровно столько багов, сколько починят. Не меньше. Но и не больше.	_	_	_	_	101	elaboration_r	_	_
107	Тестировщики. Мы делаем говно с тараканами.	_	_	_	_	109	cause_r	_	_
108	Продукты толерантные к большому количеству дефектов.	_	_	_	_	107	elaboration_r	_	_
109	Смиритесь.	_	_	_	_	100	joint_m	_	_
110	Что дальше?	_	_	_	_	111	solutionhood_r	_	_
111	Дальше менеджер желает знать о качестве не только за день до, но и раньше.	_	_	_	_	0	ROOT	_	_
112	Это тест-аналитика, тест-ферст, пороги входа в тестирования, инструменты для разработчиков и стандарты качества.	_	_	_	_	111	elaboration_r	_	_
113	Они позволяют измерять раньше.	_	_	_	_	112	elaboration_r	_	_
114	И частота измерений. Это автоматизация и банальная скорость работы.	_	_	_	_	112	joint_m	_	_
115	Чаще раза в день не надо никому.	_	_	_	_	114	elaboration_r	_	_
116	Менеджеры. Тестировать реально можно до поставки фичи на стенд.	_	_	_	_	0	ROOT	_	_
117	Узнать, что фича работает хорошо можно до написания кода.	_	_	_	_	116	joint_m	_	_
118	Есть способы.	_	_	_	_	117	evidence_r	_	_
119	А еще тестить можно в два раза быстрей, чем через полгода после найма.	_	_	_	_	116	joint_m	_	_
120	Смело требуйте.	_	_	_	_	119	elaboration_r	_	_
121	Способы и техники не ваша головная боль.	_	_	_	_	119	elaboration_r	_	_
122	Тестеры. Будьте готовы.	_	_	_	_	116	joint_m	_	_
123	Быстро работать руками - не поможет.	_	_	_	_	122	elaboration_r	_	_
124	Придется работать головой.	_	_	_	_	123	contrast_m	_	_
125	Это сложнее,	_	_	_	_	124	evaluation_r	_	_
126	на это тратится примерно один-два тестерских года.	_	_	_	_	125	evaluation_r	_	_
127	Как это ни странно, но и здесь у менеджеров есть потолок желаний.	_	_	_	_	0	ROOT	_	_
128	Чаще, чем раз в день информация уже не нужна, как правило.	_	_	_	_	127	elaboration_r	_	_
129	Если не захотеть чего-то еще	_	_	_	_	130	condition_r	_	_
130	то вы получите автоматизацию ради автоматизации -	_	_	_	_	127	evaluation_r	_	_
131	такую, которая не ищет дефекты.	_	_	_	_	130	restatement_m	_	_
132	Или людей, которые считают, что они умеют все что нужно на проекте и не видят роста.	_	_	_	_	130	joint_m	_	_
133	Что дальше?	_	_	_	_	134	solutionhood_r	_	_
134	И вот тут я серьезно ошибся.	_	_	_	_	0	ROOT	_	_
135	Я планировал выйти весь в белом	_	_	_	_	134	elaboration_r	_	_
136	и рассказать менеджерам ПРАВДУ о том, что нужно делать с двухгодовалыми тестерами с кризисом среднего опыта.	_	_	_	_	135	joint_m	_	_
137	Это когда руководитель уже не знает, куда расти этим людям	_	_	_	_	136	elaboration_r	_	_
138	и придумывает всякую фигню.	_	_	_	_	137	joint_m	_	_
139	То есть начинает платить за то,	_	_	_	_	137	restatement_m	_	_
140	что человек не уходит на другую работу.	_	_	_	_	139	purpose_r	_	_
141	Я предположил, что в рамках этой модели следующим этапом развития является время и рост тестировщика заключается во времени.	_	_	_	_	0	ROOT	_	_
142	Это же самое ценное.	_	_	_	_	141	evaluation_r	_	_
143	релиз, фича,	_	_	_	_	142	elaboration_r	_	_
144	выпустить,	_	_	_	_	143	elaboration_r	_	_
145	поставить,	_	_	_	_	144	joint_m	_	_
146	выпнуть из процесса разработки.	_	_	_	_	144	joint_m	_	_
147	Уменьшить запасы. Быстрей.	_	_	_	_	141	elaboration_r	_	_
148	Уменьшить вот эти вот области.	_	_	_	_	147	joint_m	_	_
149	Время можно обменять на все	_	_	_	_	147	evaluation_r	_	_
150	и мало что можно обменять на время.	_	_	_	_	149	contrast_m	_	_
151	Мы у себя в проекте и даже биллинг запустили на несколько месяцев подсчет.	_	_	_	_	149	evidence_r	_	_
152	Сколько времени мы тратим.	_	_	_	_	151	elaboration_r	_	_
153	Выводы.	_	_	_	_	154	preparation_r	_	_
154	Эти потери можно уменьшить?	_	_	_	_	155	solutionhood_r	_	_
155	Да.	_	_	_	_	0	ROOT	_	_
156	Можно из 20 дней сделать 8?	_	_	_	_	157	solutionhood_r	_	_
157	Да.	_	_	_	_	155	joint_m	_	_
158	Смогут тестеры уменьшить 20 до 8?	_	_	_	_	159	solutionhood_r	_	_
159	Нет.	_	_	_	_	155	joint_m	_	_
160	А до 16?	_	_	_	_	161	solutionhood_r	_	_
161	Вполне.	_	_	_	_	155	joint_m	_	_
162	И с горящими глазами я иду продавать менеджерам эту идею.	_	_	_	_	0	ROOT	_	_
163	Вот, умный тестировщик умеест строить отношения со временем	_	_	_	_	162	elaboration_r	_	_
164	и с помощью команды ускорять процесс.	_	_	_	_	163	joint_m	_	_
165	Мне казалось что я скажу менеджерам "вы хотите выпускать фичи в два раза быстрее?"	_	_	_	_	166	solutionhood_r	_	_
166	И вот она, победа.	_	_	_	_	163	evaluation_r	_	_
167	Оказалось, не надо быстро.	_	_	_	_	0	ROOT	_	_
168	Не надо даже быстро с тем же уровнем качества.	_	_	_	_	167	joint_m	_	_
169	У менеджера есть коридор не только качества, но и скорости.	_	_	_	_	167	evidence_r	_	_
170	Несколько опытнейших менеджеров вслух сказали что быстрее не надо.	_	_	_	_	169	elaboration_r	_	_
171	Надо настолько быстро,	_	_	_	_	170	elaboration_r	_	_
172	насколько хочет менеджер.	_	_	_	_	171	comparison_m	_	_
173	Желание есть, но другое.	_	_	_	_	171	evaluation_r	_	_
174	Я считаю, что это фатальная ошибка	_	_	_	_	167	evaluation_r	_	_
175	и в корне неверно,	_	_	_	_	174	joint_m	_	_
176	тем не менее это вполне себе зона роста	_	_	_	_	174	contrast_m	_	_
177	и если научиться выполнять эту работу	_	_	_	_	178	condition_r	_	_
178	- менеджер это заметит	_	_	_	_	176	joint_m	_	_
179	и оценит.	_	_	_	_	178	joint_m	_	_
180	Итак, формулировки:	_	_	_	_	182	preparation_r	_	_
181	"Самоорганизующаяся команда", "интерфейс", "самостоятельное принятие решений", "менеджмент команды", "сами знают куда расти". "Решить проблемы с тестерами".	_	_	_	_	180	elaboration_r	_	_
182	Самоподдерживающаяся система,	_	_	_	_	0	ROOT	_	_
183	не требующая ресурса управления,	_	_	_	_	182	elaboration_r	_	_
184	требующая только материальных ресурсов.	_	_	_	_	183	contrast_m	_	_
185	Это и управление потоком задач, приоритезация фич относительно багов, это управляющие воздействия, самоактуализация коридора качества.	_	_	_	_	182	elaboration_r	_	_
186	В лучшем случае это самостоятельная готовность к изменениям внешних условий.	_	_	_	_	182	evaluation_r	_	_
187	По Адизесу,	_	_	_	_	188	attribution_r	_	_
188	большие ответственность и полномочия,	_	_	_	_	182	elaboration_r	_	_
189	но без власти - в полный рост.	_	_	_	_	188	contrast_m	_	_
190	Признаки этапа - ведение задач полностью у тестеров, входящий поток задач - частично у  них с возможностью менеджера вмешаться.	_	_	_	_	182	joint_m	_	_
191	Менеджер ждет, что он будет заниматься всякими другими штуками,	_	_	_	_	193	solutionhood_r	_	_
192	а система будет работать так же.	_	_	_	_	191	contrast_m	_	_
193	На этом этапе мы учимся нашей линейкой еще и бить.	_	_	_	_	190	elaboration_r	_	_
194	Но это тупик	_	_	_	_	193	contrast_m	_	_
195	- так как задача - самоподдерживающаяся система, а не изменения.	_	_	_	_	194	cause_r	_	_
196	Выводы:	_	_	_	_	197	preparation_r	_	_
197	менеджеры. Вы все делаете правильно.	_	_	_	_	203	preparation_r	_	_
198	Тестировщики. Работа менеджмента группы разработки - сложная штука,	_	_	_	_	197	joint_m	_	_
199	вы должны знать за что и зачем беретесь.	_	_	_	_	198	joint_m	_	_
200	А что было потом?	_	_	_	_	201	solutionhood_r	_	_
201	Я считаю, что рост без ограничений невозможен.	_	_	_	_	203	preparation_r	_	_
202	Само - ничего не случится.	_	_	_	_	201	evidence_r	_	_
203	У нас есть несколько продуктов и менеджеров с высокими требованиями к бездефектности	_	_	_	_	0	ROOT	_	_
204	и там можно применить весь тестерский матан.	_	_	_	_	203	joint_m	_	_
205	И он там еще не применен.	_	_	_	_	203	joint_m	_	_
206	У нас есть пара продуктов, где нельзя тестировать,	_	_	_	_	203	joint_m	_	_
207	не становясь экспертом в домене	_	_	_	_	206	condition_r	_	_
208	и не занимаясь аналитикой.	_	_	_	_	207	joint_m	_	_
209	И там нужны тестеры - эксперты.	_	_	_	_	206	joint_m	_	_
210	У нас есть экстерн, где очень  высокие и жесткие требования к скорости работы.	_	_	_	_	203	joint_m	_	_
211	По слухам, они даже повышаются.	_	_	_	_	210	evaluation_r	_	_
212	Это тоже зона роста.	_	_	_	_	211	elaboration_r	_	_
213	У нас есть менеджеры любого продукта, которые с удовольствием отдадут тестировщикам часть работы по управлению разработкой.	_	_	_	_	203	joint_m	_	_
214	И у нас есть куча народу которые считают, что уже достигли потолка в проекте.	_	_	_	_	203	joint_m	_	_
215	И куча руководителей, желающих странного.	_	_	_	_	203	joint_m	_	_
216	Менеджеры. Не требуйте странного.	_	_	_	_	0	ROOT	_	_
217	Тестировщик - линейка.	_	_	_	_	216	evidence_r	_	_
218	Он может: быстрее, чаще, точнее, раньше.	_	_	_	_	217	elaboration_r	_	_
219	Остальное - детали реализации.	_	_	_	_	218	joint_m	_	_
220	Инструменты тестер найдет сам.	_	_	_	_	218	joint_m	_	_
221	Тестеры. Используйте мою модель.	_	_	_	_	216	joint_m	_	_
222	Придумайте свою.	_	_	_	_	221	joint_m	_	_
223	Но научитесь определять, чего от вас нужно.	_	_	_	_	221	contrast_m	_	_
224	И если ничего не нужно	_	_	_	_	225	condition_r	_	_
225	- меняйте проект.	_	_	_	_	223	contrast_m	_	_

