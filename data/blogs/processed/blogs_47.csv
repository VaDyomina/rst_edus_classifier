EDU_1;EDU_2;Relation
Процесс разработки связан, в основном, с извлечением, получением и обработкой данных из разных источников, таких как базы данных, файлы, API и т.д.;В рамках этой статьи я буду рассматривать язык PHP для того,;preparation_r
Очень много времени разработчики на организацию, получение, перемещение и обработку данных.;Процесс разработки связан, в основном, с извлечением, получением и обработкой данных из разных источников, таких как базы данных, файлы, API и т.д.;elaboration_r
чтобы, как минимум, я сам понимал, о чём говорю.;В рамках этой статьи я буду рассматривать язык PHP для того,;purpose_r
PHP — язык простой;В рамках этой статьи я буду рассматривать язык PHP для того,;elaboration_r
для понимания большинству;PHP — язык простой;purpose_r
и, я думаю, что у программистов, работающих на других языках, не возникнет проблем с пониманием данного материала.;PHP — язык простой;joint_m
Можно было бы просто абстрактно описать о структурах данных,;PHP — язык простой;elaboration_r
но хочется более осязаемого материала.;Можно было бы просто абстрактно описать о структурах данных,;contrast_m
Чаще всего для представления данных в PHP используют массив.;и поэтому требуются более подходящие структуры данных.;preparation_r
Однако в некоторых случаях массивы не подходят;Чаще всего для представления данных в PHP используют массив.;contrast_m
для решения задач.;Однако в некоторых случаях массивы не подходят;purpose_r
Где-то не хватает производительности,;и поэтому требуются более подходящие структуры данных.;cause_r
где-то слишком много памяти “кушает”,;Где-то не хватает производительности,;joint_m
и поэтому требуются более подходящие структуры данных.;Библиотека SPL — является частью ядра(начиная с пятой версии PHP);solutionhood_r
и содержит набор интерфейсов, классов структур данных, итераторов и функций,;Библиотека SPL — является частью ядра(начиная с пятой версии PHP);joint_m
с помощью которых можно значительно упростить себе жизнь;и содержит набор интерфейсов, классов структур данных, итераторов и функций,;purpose_r
и повысить качество кода.;с помощью которых можно значительно упростить себе жизнь;joint_m
Какие же есть структуры данных в этой вашей SPL?;— SplDoublyLinkedList;preparation_r
— Двусвязные спискиSplStack;— SplDoublyLinkedList;joint_m
— СтекSplQueue;— SplDoublyLinkedList;joint_m
— ОчередьSplHeap;— SplDoublyLinkedList;joint_m
— КучаSplMaxHeap — Сортировка кучи по убыванию;— SplDoublyLinkedList;joint_m
— SplMinHeap — Сортировка кучи по возрастанию;— SplDoublyLinkedList;joint_m
— SplPriorityQueue — Приоритетные очереди;— SplDoublyLinkedList;joint_m
— SplFixedArray — Массив с ограниченной длиной;— SplDoublyLinkedList;joint_m
— SplObjectStorage — Хранилище объектов;— SplDoublyLinkedList;joint_m
SplDoublyLinkedList;Двусвязный список позволяет эффективно обходить;preparation_r
SplDoublyLinkedList — двусвязный список.;Двусвязный список позволяет эффективно обходить;solutionhood_r
Каждый узел такого списка хранит ссылку на предыдущий и на следующий за ним узел.;SplDoublyLinkedList — двусвязный список.;elaboration_r
Представьте, что вы находитесь в очереди;Каждый узел такого списка хранит ссылку на предыдущий и на следующий за ним узел.;elaboration_r
и при этом можете видеть только человека перед вами и позади вас.;Представьте, что вы находитесь в очереди;joint_m
Это аналогия отношения связи между элементами в SplDoublyLinkedList.;Представьте, что вы находитесь в очереди;comparison_m
Вставка элемента в список соответствует ситуации,;Это аналогия отношения связи между элементами в SplDoublyLinkedList.;elaboration_r
когда кто-то влез в очередь,;Вставка элемента в список соответствует ситуации,;condition_r
а вы вдруг забыли, кто стоял перед вами;когда кто-то влез в очередь,;contrast_m
(и этот кто-то забыл о вас).;а вы вдруг забыли, кто стоял перед вами;joint_m
и добавлять большие наборы данных;Двусвязный список позволяет эффективно обходить;joint_m
без необходимости повторного хеширования.;и добавлять большие наборы данных;condition_r
SplQueue и SplStack;SplQueue и SplStack очень похожи на SplDoublyLinkedList.;preparation_r
Обе эти структуры, по сути, представляют собой двусвязные списки с разными флагами итераторов(IT_MODE_LIFO — Last In First Out — последним пришёл, первым ушёл и IT_MODE_FIFO — First In First Out — первым пришёл, первым ушёл),;SplQueue и SplStack очень похожи на SplDoublyLinkedList.;elaboration_r
которые регулируют порядок обработки узлов;Обе эти структуры, по сути, представляют собой двусвязные списки с разными флагами итераторов(IT_MODE_LIFO — Last In First Out — последним пришёл, первым ушёл и IT_MODE_FIFO — First In First Out — первым пришёл, первым ушёл),;elaboration_r
и что делать с этими элементами;которые регулируют порядок обработки узлов;joint_m
после того, как они будут обработаны.;и что делать с этими элементами;sequence_m
Ещё одно отличие между этими структурами заключается в том, что интерфейс SplQueue содержит более интуитивно понятные методы enqueue() и dequeue();SplQueue и SplStack очень похожи на SplDoublyLinkedList.;joint_m
в отличие от методов push() и pop() у SplStack.;Ещё одно отличие между этими структурами заключается в том, что интерфейс SplQueue содержит более интуитивно понятные методы enqueue() и dequeue();comparison_m
SplHeap;SplHeap — куча, представленная в виде бинарного дерева,;preparation_r
каждый узел которого имеет не более двух дочерних узлов.;SplHeap — куча, представленная в виде бинарного дерева,;elaboration_r
Это абстрактный класс, требующий расширения с определением метода compare(),;SplHeap — куча, представленная в виде бинарного дерева,;elaboration_r
позволяющего выполнять сортировку в реальном времени;Это абстрактный класс, требующий расширения с определением метода compare(),;purpose_r
при вставке новых узлов в дерево.;позволяющего выполнять сортировку в реальном времени;condition_r
SplMaxHeap и SplMinHeap;SplMaxHeap и SplMinHeap — конкретные реализации абстрактного класса SplHeap.;preparation_r
SplMaxHeapреализует метод compare() таким образом,;SplMaxHeap и SplMinHeap — конкретные реализации абстрактного класса SplHeap.;elaboration_r
чтобы дерево было отсортировано в порядке убывания значений узлов,;SplMaxHeapреализует метод compare() таким образом,;purpose_r
а SplMinHeap — в порядке возрастания значений.;SplMaxHeapреализует метод compare() таким образом,;joint_m
SplPriorityQueue;SplPriorityQueue — очередь, похожая на SplHeap,;preparation_r
но в отличие от SplHeap сортировка осуществляется на основании значения свойства priority (приоритет),;SplPriorityQueue — очередь, похожая на SplHeap,;contrast_m
заданного для каждого узла.;но в отличие от SplHeap сортировка осуществляется на основании значения свойства priority (приоритет),;condition_r
SplFixedArray;SplFixedArray — массив фиксированной длины, индексами которого могут быть только целые числа.;preparation_r
Эти ограничению обеспечивают более высокую скорость обработки массива,;SplFixedArray — массив фиксированной длины, индексами которого могут быть только целые числа.;elaboration_r
которая достигается, в том числе,;Эти ограничению обеспечивают более высокую скорость обработки массива,;elaboration_r
благодаря тому, что в SplFixedArray нет хеширования ключей элементов;которая достигается, в том числе,;cause_r
при их добавлении;благодаря тому, что в SplFixedArray нет хеширования ключей элементов;condition_r
(в отличие от обычных массивов).;которая достигается, в том числе,;comparison_m
SplObjectStorage;SplObjectStorage — хранилище объектов, предоставляет интерфейс;purpose_r
для сопоставления объектов к данным,;SplObjectStorage — хранилище объектов, предоставляет интерфейс;purpose_r
либо может быть использовано в качестве контейнера для множества объектов.;для сопоставления объектов к данным,;joint_m
Позволяет использовать объект в качестве ключа ассоциативного массива;SplObjectStorage — хранилище объектов, предоставляет интерфейс;purpose_r
и связать его с некоторыми данными.;Позволяет использовать объект в качестве ключа ассоциативного массива;joint_m
Официальная документация по SPL здесь;SplObjectStorage — хранилище объектов, предоставляет интерфейс;attribution_r
Кстати, если претендуешь на вакансию уровня серьёзнее, чем junior,;есть вероятность, что об этом спросят на собеседовании.;condition_r
есть вероятность, что об этом спросят на собеседовании.;А ты теперь это знаешь!;solutionhood_r
Не благодари.;А ты теперь это знаешь!;evaluation_r