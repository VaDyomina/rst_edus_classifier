EDU_1;EDU_2;Relation
Существует большой разброс в уровнях квалификации разработчиков.;— это не обязательно гарантирует то, что он является эффективным и продуктивным сеньором.;preparation_r
И то, что называют «сеньорностью», часто ничего не говорит о реальных возможностях программиста.;Существует большой разброс в уровнях квалификации разработчиков.;joint_m
Что делает некоторых разработчиков объективно лучше других?;— это не обязательно гарантирует то, что он является эффективным и продуктивным сеньором.;solutionhood_r
Что выделяет их из серой толпы?;Что делает некоторых разработчиков объективно лучше других?;joint_m
Если у программиста есть пять, десять или даже пятнадцать лет «практического опыта»;— это не обязательно гарантирует то, что он является эффективным и продуктивным сеньором.;condition_r
На самом деле — это даже не значит, что он вообще может так называться.;— это не обязательно гарантирует то, что он является эффективным и продуктивным сеньором.;contrast_m
Конечно, существуют и такие несчастные, из-за которых за успешными сеньорами, которые обычно немолоды, закрепилась плохая репутация.;— это не обязательно гарантирует то, что он является эффективным и продуктивным сеньором.;background_r
Но и молодым сеньорам тоже не легче.;Конечно, существуют и такие несчастные, из-за которых за успешными сеньорами, которые обычно немолоды, закрепилась плохая репутация.;joint_m
Однако существуют определённые черты и знания, общие для разных программистов-сеньоров.;Конечно, существуют и такие несчастные, из-за которых за успешными сеньорами, которые обычно немолоды, закрепилась плохая репутация.;contrast_m
Они, скорее, отличаются особой структурой знаний, особым мышлением.;Нельзя сказать, что реальным сеньорам известны какие-то секреты профессионального мастерства.;contrast_m
И то и другое поддаётся развитию.;Они, скорее, отличаются особой структурой знаний, особым мышлением.;elaboration_r
Автор материала, перевод которого мы сегодня публикуем, говорит, что хочет рассказать о некоторых признаках, которые помогают отличить настоящего программиста-сеньора от программиста с «сеньорностью».;Нельзя сказать, что реальным сеньорам известны какие-то секреты профессионального мастерства.;joint_m
Парадигмы программирования;Принципы SOLID, объектно-ориентированное и функциональное программирование — это три парадигмы программирования, три методологии написания чистого кода,;preparation_r
которые составляют значительную часть концептуальных подходов,;Принципы SOLID, объектно-ориентированное и функциональное программирование — это три парадигмы программирования, три методологии написания чистого кода,;elaboration_r
стоящих за созданием программ.;которые составляют значительную часть концептуальных подходов,;elaboration_r
Многие программисты-джуниоры в ходе работы упускают одну важную вещь, которая заключается в том, что программирование — это язык.;Принципы SOLID, объектно-ориентированное и функциональное программирование — это три парадигмы программирования, три методологии написания чистого кода,;joint_m
Это означает, что программирование — это нечто большее, чем набор неких грамматических правил.;Многие программисты-джуниоры в ходе работы упускают одну важную вещь, которая заключается в том, что программирование — это язык.;restatement_m
Это — средство общения,;Это означает, что программирование — это нечто большее, чем набор неких грамматических правил.;contrast_m
явление, которое может быть структурировано множеством способов.;Это — средство общения,;elaboration_r
Парадигмы программирования помогают;Многие программисты-джуниоры в ходе работы упускают одну важную вещь, которая заключается в том, что программирование — это язык.;joint_m
сформировать определённую позицию относительно того, как код воспринимается,;Парадигмы программирования помогают;purpose_r
и того, как он передаёт информацию.;сформировать определённую позицию относительно того, как код воспринимается,;joint_m
— точно так же, как кто угодно может написать сообщение в мессенджере или короткий обзор книги на Amazon.;Писать код может кто угодно;comparison_m
Но подобные тексты нельзя поставить на один уровень с романами Стивена Кинга.;Писать код может кто угодно;contrast_m
Парадигмы программирования действуют как направляющая сила, стоящая за кодом, который пишут сеньоры.;Писать код может кто угодно;comparison_m
Это делает парадигмы похожими на сюжетные структуры, которым следуют авторы художественных произведений.;Парадигмы программирования действуют как направляющая сила, стоящая за кодом, который пишут сеньоры.;elaboration_r
Все языки пронизаны формулами.;Это делает парадигмы похожими на сюжетные структуры, которым следуют авторы художественных произведений.;joint_m
Разработчики-сеньоры понимают их на глубоком уровне,;Это делает парадигмы похожими на сюжетные структуры, которым следуют авторы художественных произведений.;joint_m
до которого джунам и мидлам ещё только предстоит дойти.;Разработчики-сеньоры понимают их на глубоком уровне,;comparison_m
Способность создавать;мы задаём вопросы;preparation_r
Когда мы впервые приходим в мир циклов for и конструкций if else,;мы задаём вопросы;condition_r
и пытаемся найти ответы на них в виде кода,;мы задаём вопросы;joint_m
который можно откуда-то скопировать;и пытаемся найти ответы на них в виде кода,;elaboration_r
и вставить в свой проект.;который можно откуда-то скопировать;joint_m
Уровень понимания этого кода — это то, чем характеризуется квалификация джуниоров, которые только приступили к работе, и начинающих мидлов.;мы задаём вопросы;elaboration_r
Они могут создавать что-то новое и без особенной помощи всемогущего Google.;Сеньоры, однако, идут дальше копирования.;elaboration_r
Они знают о том, что делают,;Они могут создавать что-то новое и без особенной помощи всемогущего Google.;joint_m
они понимают то, как их решения воздействуют на результаты их работы.;Они знают о том, что делают,;joint_m
Они могут видеть,;Они могут создавать что-то новое и без особенной помощи всемогущего Google.;joint_m
или, по крайней мере, предвидеть нештатные ситуации.;Они могут видеть,;joint_m
Они понимают проблемы своего кода;Они могут создавать что-то новое и без особенной помощи всемогущего Google.;joint_m
и знают о том, как с ними бороться.;Они понимают проблемы своего кода;joint_m
Если им что-то неизвестно;— они восполняют пробелы в знаниях,;condition_r
серьёзно разбираясь в неясных вопросах,;— они восполняют пробелы в знаниях,;condition_r
не ограничиваясь лишь их поверхностным изучением.;серьёзно разбираясь в неясных вопросах,;contrast_m
Они глубоко понимают все те инструменты, которыми пользуются.;серьёзно разбираясь в неясных вопросах,;evaluation_r
Мир кода выглядит в глазах сеньоров не так, как в глазах джунов или мидлов.;— они восполняют пробелы в знаниях,;evaluation_r
Объективная критика;Все отдают предпочтение тому, что они знают.;preparation_r
Джуниоры и мидлы демонстрируют сильную тенденцию к тому, чтобы делать акцент на их собственном опыте, а не на том, что относится к анализируемому ими коду.;Все отдают предпочтение тому, что они знают.;elaboration_r
Если они высказывают некое предложение,;— основой всего этого являются их личные предпочтения.;condition_r
или если они оценивают что-либо;Если они высказывают некое предложение,;joint_m
— основой всего этого являются их личные предпочтения.;Джуниоры и мидлы демонстрируют сильную тенденцию к тому, чтобы делать акцент на их собственном опыте, а не на том, что относится к анализируемому ими коду.;evidence_r
Это — стиль написания кода, способы именования сущностей, методы мышления.;— основой всего этого являются их личные предпочтения.;elaboration_r
Всё это — часть процесса профессионального роста.;В этом нет ничего плохого.;evidence_r
Для того чтобы достичь настоящей объективности суждений,;программисту нужно побывать во множестве ситуаций;purpose_r
программисту нужно побывать во множестве ситуаций;Это развивает у разработчика нейтральный взгляд на вещи.;cause_r
и самому увидеть, как нечто, неприемлемое в одном случае, в другом может оказаться наилучшим решением некоей проблемы.;программисту нужно побывать во множестве ситуаций;joint_m
Это развивает у разработчика нейтральный взгляд на вещи.;В этом нет ничего плохого.;elaboration_r
Нет единственно правильного способа писать код.;Это развивает у разработчика нейтральный взгляд на вещи.;elaboration_r
Есть лишь способы, которые эффективны в определённой ситуации и при определённом сценарии развития событий.;Нет единственно правильного способа писать код.;contrast_m
Программисты-сеньоры это понимают.;Нет единственно правильного способа писать код.;evaluation_r
Они готовы принять то, что их код может и не быть неким «самым лучшим» кодом,;Программисты-сеньоры это понимают.;elaboration_r
и то, что он может быть подвергнуть улучшению.;Они готовы принять то, что их код может и не быть неким «самым лучшим» кодом,;joint_m
указывая на беспорядок, который устраивают в программах их коллеги;Сеньоры часто становятся продуктивными контролёрами качества кода,;cause_r
и отмечая слабые места архитектуры приложений.;указывая на беспорядок, который устраивают в программах их коллеги;joint_m
Они способны увидеть общую картину проекта,;Сеньоры часто становятся продуктивными контролёрами качества кода,;elaboration_r
оценить возможность возникновения совершенно неожиданных проблем.;Они способны увидеть общую картину проекта,;joint_m
При этом они не привязаны к какому-то стилю написания кода или к какой-то парадигме программирования.;Они способны увидеть общую картину проекта,;joint_m
В центре их внимания находятся не инструменты, а результат.;При этом они не привязаны к какому-то стилю написания кода или к какой-то парадигме программирования.;contrast_m
Разница между хорошей программой и работающей программой;Разработчики создают код,;preparation_r
главная задача которого — запуститься.;Разработчики создают код,;purpose_r
Некоторые из них останавливаются на этом,;Разработчики создают код,;elaboration_r
и считают, что работающий код — это всё, что им нужно.;Некоторые из них останавливаются на этом,;joint_m
Другие идут немного дальше;Некоторые из них останавливаются на этом,;comparison_m
и стремятся к тому,;Другие идут немного дальше;joint_m
чтобы код был бы не только работающим, но и качественно написанным.;и стремятся к тому,;purpose_r
Лучшие разработчики — это те профессионалы,;Разработчики создают код,;joint_m
которые в процессе работы редактируют;Лучшие разработчики — это те профессионалы,;elaboration_r
и переписывают наш код.;которые в процессе работы редактируют;joint_m
Они могут и согласиться с применением какой-нибудь неудачной конструкции,;Лучшие разработчики — это те профессионалы,;elaboration_r
но как только у них возникнет возможность её исправить;— они это сделают.;condition_r
— они это сделают.;Они могут и согласиться с применением какой-нибудь неудачной конструкции,;contrast_m
Такие разработчики понимают разницу между хорошей и работающей программой.;Лучшие разработчики — это те профессионалы,;evaluation_r
Но хорошие разработчики-сеньоры видят ситуацию глубже.;Большинство руководителей интересует только работоспособность программы.;contrast_m
Они понимают скрытую стоимость технического долга;Но хорошие разработчики-сеньоры видят ситуацию глубже.;elaboration_r
и способны распознать код, который указывает на наличие в системе глубинных проблем.;Они понимают скрытую стоимость технического долга;joint_m
Они знают о том, как совместить потребность бизнеса в работающих программах с качеством кода.;Они понимают скрытую стоимость технического долга;joint_m
Это позволяет им находить баланс между сдачей проектов в срок и включением в них дополнительных возможностей,;Они понимают скрытую стоимость технического долга;purpose_r
о которых заказчики проектов вспоминают далеко не в самом начале работы.;Это позволяет им находить баланс между сдачей проектов в срок и включением в них дополнительных возможностей,;elaboration_r
Широта их знаний, понимание фреймворков и языков программирования, делают их экспертами в вопросе нахождения разницы между программами работающими и программами качественными.;Они умеют создавать и то и другое.;cause_r
Они умеют создавать и то и другое.;Это даёт настоящим сеньорам возможность находить креативные решения проблем в самых разных ситуациях.;cause_r
Это даёт настоящим сеньорам возможность находить креативные решения проблем в самых разных ситуациях.;Это позволяет им находить баланс между сдачей проектов в срок и включением в них дополнительных возможностей,;elaboration_r
Способность учить;У настоящих разработчиков-сеньоров есть страсть к технологиям,;preparation_r
Посредственный учитель излагает.;Способность учить;joint_m
Хороший учитель объясняет.;Посредственный учитель излагает.;comparison_m
Выдающийся учитель показывает.;Посредственный учитель излагает.;comparison_m
Великий учитель вдохновляет.;Посредственный учитель излагает.;comparison_m
Уильям Артур Уорд;Посредственный учитель излагает.;attribution_r
которая вдохновляет их менее опытных товарищей,;помогая начинающим становиться профессионалами высочайшего класса.;cause_r
помогая начинающим становиться профессионалами высочайшего класса.;У настоящих разработчиков-сеньоров есть страсть к технологиям,;elaboration_r
У сеньоров есть способность сжато и понятно излагать эти идеи.;Программирование, само по себе, это набор неких идей.;elaboration_r
Способность сеньоров переносить код между разными интерфейсами и средами демонстрирует истинное понимание выбранного ими языка программирования.;У сеньоров есть способность сжато и понятно излагать эти идеи.;evaluation_r
Для того чтобы кого-либо чему-либо учить,;необходим определённый уровень владения предметом.;purpose_r
необходим определённый уровень владения предметом.;У сеньоров есть способность сжато и понятно излагать эти идеи.;elaboration_r
То, что называют «опытом работы», может выглядеть в резюме программиста как перечень выполненных им проектов, или как время, которое он трудился в разных компаниях.;необходим определённый уровень владения предметом.;elaboration_r
Но возможность учить других — это навык, который доступен лишь тому, кто по-настоящему владеет своим ремеслом.;То, что называют «опытом работы», может выглядеть в резюме программиста как перечень выполненных им проектов, или как время, которое он трудился в разных компаниях.;contrast_m
Итоги;Настоящий разработчик-сеньор — это многогранное существо,;preparation_r
которое иногда,;Настоящий разработчик-сеньор — это многогранное существо,;elaboration_r
если речь идёт об областях, находящихся вне сферы его основной деятельности,;может выглядеть как джун или мидл.;condition_r
может выглядеть как джун или мидл.;которое иногда,;same-unit_m
Но сеньор обладает мощной базой в области философии программирования.;Настоящий разработчик-сеньор — это многогранное существо,;contrast_m
Однако вышеприведённые особенности сеньоров — это то, что присутствует в их личностях и в их профессиональных знаниях.;Это позволяет им осваивать новые технологии быстрее, чем некоему «усреднённому» программисту.;purpose_r
Это позволяет им осваивать новые технологии быстрее, чем некоему «усреднённому» программисту.;Настоящий разработчик-сеньор — это многогранное существо,;contrast_m
Часто сеньоры — это люди, которые способны охватить одним взглядом общую картину происходящего.;Это позволяет им осваивать новые технологии быстрее, чем некоему «усреднённому» программисту.;background_r
Они способны смотреть на код без предрассудков и суеверий.;Часто сеньоры — это люди, которые способны охватить одним взглядом общую картину происходящего.;joint_m
При этом он не будет представлять собой разрушительную силу, которая пытается втиснуть всё, с чем сталкивается, в прокрустово ложе собственного опыта.;Настоящий сеньор будет вести своих товарищей по работе к привычкам создания чистого кода.;joint_m
Этот человек спокойно воспринимает ошибки сослуживцев, да и свои тоже.;При этом он не будет представлять собой разрушительную силу, которая пытается втиснуть всё, с чем сталкивается, в прокрустово ложе собственного опыта.;contrast_m
Он стремится учиться;Этот человек спокойно воспринимает ошибки сослуживцев, да и свои тоже.;elaboration_r
и учить на ошибках,;Он стремится учиться;joint_m
а не унижать менее опытных коллег.;Он стремится учиться;contrast_m
Разработчик-сеньор может быть человеком любого возраста,;Настоящий сеньор будет вести своих товарищей по работе к привычкам создания чистого кода.;joint_m
он может прийти из любой отрасли информационных технологий,;Разработчик-сеньор может быть человеком любого возраста,;joint_m
его «практический опыт» может исчисляться любым количеством лет.;Разработчик-сеньор может быть человеком любого возраста,;joint_m
Главная особенность таких людей заключается в том, что они по-настоящему умеют решать проблемы,;Разработчик-сеньор может быть человеком любого возраста,;elaboration_r
и в том, что они способны мыслить в долгосрочной перспективе.;Главная особенность таких людей заключается в том, что они по-настоящему умеют решать проблемы,;joint_m