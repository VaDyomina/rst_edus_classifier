EDU_1;EDU_2;Relation
Типичная ситуация.;В этой заметке я собрал веские причины не поддаваться соблазну протащить новые игрушки в продакшн.;solutionhood_r
Программист читает книжку о новом, или не таком уж и новом, языке программирования, базе данных или иной технологии;Типичная ситуация.;elaboration_r
и сгорает от нетерпения поскорее ее попробовать.;Программист читает книжку о новом, или не таком уж и новом, языке программирования, базе данных или иной технологии;joint_m
Возможно, он узнает о технологии или подходе не из книги, а из подкаста или доклада на конференции,;Программист читает книжку о новом, или не таком уж и новом, языке программирования, базе данных или иной технологии;elaboration_r
не суть важно.;Возможно, он узнает о технологии или подходе не из книги, а из подкаста или доклада на конференции,;evaluation_r
Другая похожая ситуация;Типичная ситуация.;joint_m
— «в нашем проекте все очень плохо,;давайте все перенесем на PostgreSQL;solutionhood_r
потому что мы используем DynamoDB;— «в нашем проекте все очень плохо,;cause_r
(пишем на Java),;потому что мы используем DynamoDB;elaboration_r
давайте все перенесем на PostgreSQL;Другая похожая ситуация;elaboration_r
(перепишем на Erlang)».;давайте все перенесем на PostgreSQL;elaboration_r
1. Почти всегда внедрение новой технологии или переход с одной на другую — задача очень непростая и ресурсоемкая.;Ваши эстимейты о том, что это якобы займет месяц или два, неверны,;preparation_r
потому что вы не учитываете необходимость поддерживать;Ваши эстимейты о том, что это якобы займет месяц или два, неверны,;cause_r
и развивать то, что уже есть сейчас, миграцию данных, необходимость поправить десятки, если не сотни, багов, которые выявятся после перехода, и так далее.;потому что вы не учитываете необходимость поддерживать;joint_m
Вы должны быть абсолютно уверены, что у вас фичфриз (не только на словах!);Ваши эстимейты о том, что это якобы займет месяц или два, неверны,;contrast_m
и прямо сейчас нет более приоритетных задач.;Вы должны быть абсолютно уверены, что у вас фичфриз (не только на словах!);joint_m
А такое бывает крайне редко.;Вы должны быть абсолютно уверены, что у вас фичфриз (не только на словах!);contrast_m
2. Технология редко оказывается настоящим источником проблемы.;попробуйте уже наконец начать писать тесты.;preparation_r
Почти всегда дело в людях, не разобравшихся, как эту технологию правильно применять.;2. Технология редко оказывается настоящим источником проблемы.;contrast_m
Если отовсюду лезут баги,;попробуйте уже наконец начать писать тесты.;condition_r
Если все тормозит,;сядьте;condition_r
сядьте;попробуйте уже наконец начать писать тесты.;joint_m
и обдумайте как следует оптимизацию,;сядьте;joint_m
заведите кэши, и так далее.;сядьте;joint_m
Если хоститься в Amazon слишком дорого,;оптимизируйте расходы.;condition_r
оптимизируйте расходы.;попробуйте уже наконец начать писать тесты.;joint_m
За один рабочий день можно легко сократить стоимость размещения сервиса в AWS на 25-50%,;оптимизируйте расходы.;elaboration_r
практически ничего при этом не потеряв,;За один рабочий день можно легко сократить стоимость размещения сервиса в AWS на 25-50%,;condition_r
проверено!;За один рабочий день можно легко сократить стоимость размещения сервиса в AWS на 25-50%,;evidence_r
3. Любая технология имеет слабые и сильные стороны.;Либо скорость, либо безопасность.;preparation_r
Скорее всего, сейчас вы сосредоточены только на сильных.;3. Любая технология имеет слабые и сильные стороны.;evaluation_r
MongoDB может очень круто скейлиться,;Сегодня мы видим появление большого количества «убийц C/C++», таких же быстрых, но еще и безопасных.;solutionhood_r
но насколько это реально удобно жить без схемы БД, транзакций и вьюх?;MongoDB может очень круто скейлиться,;contrast_m
Сегодня мы видим появление большого количества «убийц C/C++», таких же быстрых, но еще и безопасных.;Либо скорость, либо безопасность.;solutionhood_r
Допустим, есть массив из 1000 объектов.;нужно вызвать 1000 конструкторов,;condition_r
Для безопасности;нужно вызвать 1000 конструкторов,;purpose_r
при инициализации массива;нужно вызвать 1000 конструкторов,;condition_r
нужно вызвать 1000 конструкторов,;Сегодня мы видим появление большого количества «убийц C/C++», таких же быстрых, но еще и безопасных.;elaboration_r
а при обращении к элементам массива;проверять, не вышли ли мы за его пределы.;condition_r
проверять, не вышли ли мы за его пределы.;нужно вызвать 1000 конструкторов,;contrast_m
Что выбрали в Rust,;Либо скорость, либо безопасность.;evidence_r
он безопасный или быстрый?;Что выбрали в Rust,;elaboration_r
Всегда приходится делать какой-то компромисс.;Либо скорость, либо безопасность.;joint_m
4. У любой технологии помимо явных минусов всегда есть еще свои «тонкости и нюансы».;То есть, помимо теории, речь о которой шла в предыдущем пункте, есть еще и практика.;preparation_r
При переходе на новую базу данных, язык, фреймворк или методологию;вы соберете все-все-все грабли и баги.;condition_r
вы соберете все-все-все грабли и баги.;То есть, помимо теории, речь о которой шла в предыдущем пункте, есть еще и практика.;solutionhood_r
Невероятно, но в компиляторе вашего нового любимого языка программирования баги тоже есть!;вы соберете все-все-все грабли и баги.;evaluation_r
Помимо багов бывают и другие проблемы, например, сломанная обратная совместимость в новых релизах.;вы соберете все-все-все грабли и баги.;joint_m
Если речь о базе данных,;тогда вы можете потерять данные при нетсплитах.;condition_r
тогда вы можете потерять данные при нетсплитах.;Помимо багов бывают и другие проблемы, например, сломанная обратная совместимость в новых релизах.;elaboration_r
Если об облачном хостинге,;вы можете столкнуться с проблемой шумных соседей.;condition_r
вы можете столкнуться с проблемой шумных соседей.;тогда вы можете потерять данные при нетсплитах.;joint_m
Будьте ко всему этому морально готовы.;То есть, помимо теории, речь о которой шла в предыдущем пункте, есть еще и практика.;elaboration_r
5. Инструментарий.;Можно долго хаять C/C++,;preparation_r
что писать на нем не безопасно,;Можно долго хаять C/C++,;cause_r
но за годы существования у языка появились IDE, отладчики, статические анализаторы кода и другие стабильные, проверенные временем инструменты разработки,;Можно долго хаять C/C++,;contrast_m
решающие очень многие практические проблемы.;но за годы существования у языка появились IDE, отладчики, статические анализаторы кода и другие стабильные, проверенные временем инструменты разработки,;purpose_r
У Rust и Haskell до сих пор нет нормальных IDE.;Можно долго хаять C/C++,;contrast_m
Если брать фреймворки,;то Play Framework, к примеру, поддерживается существующими IDE тоже из рук вон плохо.;condition_r
то Play Framework, к примеру, поддерживается существующими IDE тоже из рук вон плохо.;У Rust и Haskell до сих пор нет нормальных IDE.;joint_m
Возможно, вам и в Vim неплохо пишется,;то Play Framework, к примеру, поддерживается существующими IDE тоже из рук вон плохо.;joint_m
но разделяют ли ваш энтузиазм в этом вопросе ваши коллеги и люди, приходящие на собеседования?;Возможно, вам и в Vim неплохо пишется,;contrast_m
6. Библиотеки.;Недаром ведь в C++ предусмотрена возможность вызывать сишный код напрямую, а в языке Scala — код, написанный на Java.;preparation_r
Если речь о базе данных,;для каких языков у нее есть клиенты;condition_r
для каких языков у нее есть клиенты;Недаром ведь в C++ предусмотрена возможность вызывать сишный код напрямую, а в языке Scala — код, написанный на Java.;solutionhood_r
и насколько они хороши?;для каких языков у нее есть клиенты;joint_m
Если речь о языке,;есть ли у него AWS SDK?;condition_r
есть ли у него AWS SDK?;для каких языков у нее есть клиенты;joint_m
Как на этом языке нарисовать диаграмму?;есть ли у него AWS SDK?;elaboration_r
Как построить отчет в Excel или PDF?;есть ли у него AWS SDK?;elaboration_r
Очень во многих современных проектах есть потребность строить какие-то отчеты;для каких языков у нее есть клиенты;elaboration_r
и эти вопросы возникают очень быстро.;Очень во многих современных проектах есть потребность строить какие-то отчеты;joint_m
Биндинги не решают проблему,;Очень во многих современных проектах есть потребность строить какие-то отчеты;contrast_m
так как зачастую они плохо взаимодействуют с рантаймом языка;Биндинги не решают проблему,;cause_r
(особенно если это язык с легковесными процессами, как Erlang или Go),;так как зачастую они плохо взаимодействуют с рантаймом языка;elaboration_r
покрывают малую часть возможностей библиотеки,;Биндинги не решают проблему,;joint_m
завязаны на старую версию оригинальной библиотеки,;Биндинги не решают проблему,;joint_m
просто сломаны;Биндинги не решают проблему,;joint_m
(так было с биндингами к GD для Haskell,;просто сломаны;evidence_r
когда я последний раз их смотрел),;(так было с биндингами к GD для Haskell,;condition_r
очень плохо документированы;Биндинги не решают проблему,;joint_m
(попробуйте поработать с OpenGL на Haskell) и так далее.;очень плохо документированы;evidence_r
7. Зоопарк технологий создает проблемы,;Казалось бы, риски минимальные,;preparation_r
как бы вам не хотелось верить в обратное.;7. Зоопарк технологий создает проблемы,;contrast_m
если вы все построили на микросервисах.;Казалось бы, риски минимальные,;condition_r
Но написанные на разных языках микросервисы взаимодействуют друг с другом,;а значит для каждого микросервиса нужно поддерживать несколько версий клиента на разных языках.;cause_r
а значит для каждого микросервиса нужно поддерживать несколько версий клиента на разных языках.;Казалось бы, риски минимальные,;contrast_m
Если вы думаете, что написали очень маленький скрипт или сервис,;то тоже ошибаетесь.;condition_r
и его не нужно «поддерживать»,;Если вы думаете, что написали очень маленький скрипт или сервис,;joint_m
так как в случае чего проще выкинуть;и его не нужно «поддерживать»,;cause_r
и написать с нуля,;так как в случае чего проще выкинуть;joint_m
то тоже ошибаетесь.;Казалось бы, риски минимальные,;joint_m
В случае с сервисом потребуется миграция данных и бесшовное переключение.;Казалось бы, риски минимальные,;joint_m
Маленькие скрипты постепенно дописываются,;в результате чего разрастаются;cause_r
в результате чего разрастаются;и их становится не так уж просто переписать.;cause_r
и их становится не так уж просто переписать.;В случае с сервисом потребуется миграция данных и бесшовное переключение.;elaboration_r
К тому же, даже в маленьких скриптах исправляются десятки багов,;и их становится не так уж просто переписать.;joint_m
и выкидывать проверенный временем, стабильный код — это большой риск.;К тому же, даже в маленьких скриптах исправляются десятки багов,;joint_m
8. Размер сообщества имеет значение.;Не забывайте, что все возникающие проблемы вам придется решать;preparation_r
Вокруг новых технологий это сообщество, как правило, довольно невелико.;Не забывайте, что все возникающие проблемы вам придется решать;solutionhood_r
Если вы столкнетесь со сложной проблемой,;то где будете просить помощи?;condition_r
то где будете просить помощи?;Вокруг новых технологий это сообщество, как правило, довольно невелико.;elaboration_r
Написаны ли уже книги и документация, с которыми смогут ознакомиться ваши коллеги?;то где будете просить помощи?;joint_m
в условиях авралов и дэдлайнов.;Не забывайте, что все возникающие проблемы вам придется решать;condition_r
9. Велика вероятность, что вы решаете новым модным инструментом не ту задачу.;Что-то будет лучше,;preparation_r
У многих компаний не такой уж highload;Что-то будет лучше,;solutionhood_r
для использования NoSQL решений.;У многих компаний не такой уж highload;purpose_r
Обычный PostgreSQL с репликами и, возможно, небольшим ручным шардированием, решит задачу куда лучше, чем этот ваш Riak.;У многих компаний не такой уж highload;contrast_m
Также во многих компаниях не такой уж big data,;У многих компаний не такой уж highload;joint_m
чтобы использовать Hadoop.;Также во многих компаниях не такой уж big data,;purpose_r
Если речь идет о нескольких терабайтах данных в месяц,;их будет намного быстрее обработать безо всяких там Hadoop.;condition_r
их будет намного быстрее обработать безо всяких там Hadoop.;У многих компаний не такой уж highload;joint_m
Кроме того,;У многих компаний не такой уж highload;joint_m
если сейчас вы пишите вебчик на Scala,;то нет смысла переписывать все на Rust или Go,;condition_r
то нет смысла переписывать все на Rust или Go,;Кроме того,;same-unit_m
так как эти языки, скорее всего, просто не дадут вам существенных преимуществ.;Кроме того,;cause_r
а что-то намного хуже.;Что-то будет лучше,;joint_m
Если сейчас вы протащите Cassandra в продакшн;кто потом сможет это поддерживать?;condition_r
и уйдете из проекта,;Если сейчас вы протащите Cassandra в продакшн;joint_m
кто потом сможет это поддерживать?;10. Где вы будете искать программистов с опытом этого вашего модного Swift или Clojure?;joint_m
И кому, собственно, вы такой классный будете нужны со знанием этих странных и никому не нужных технологий?;10. Где вы будете искать программистов с опытом этого вашего модного Swift или Clojure?;joint_m
Не лучше ли инвестировать свое время в что-то более распространенное на практике?;10. Где вы будете искать программистов с опытом этого вашего модного Swift или Clojure?;contrast_m
иначе можно на ровном месте создать самому себе кучу проблем.;В общем и целом, перед протаскиванием новой технологии всегда нужно проявлять осторожность,;contrast_m
Сомневайтесь во всем, что вам говорят евангелисты.;В общем и целом, перед протаскиванием новой технологии всегда нужно проявлять осторожность,;joint_m
Не стесняйтесь (вежливо и без троллфейса!) задавать им неудобные вопросы вроде тех, что были приведенны выше.;Сомневайтесь во всем, что вам говорят евангелисты.;joint_m
В случая с языками хорошим признаком является возможность вызывать код на Си или Java напрямую, без биндингов.;Это означает, что создатели языка подумали о минимизации рисков,;cause_r
Еще более хороший признак, если язык транслируется в C/C++ или Java.;В случая с языками хорошим признаком является возможность вызывать код на Си или Java напрямую, без биндингов.;joint_m
Это означает, что создатели языка подумали о минимизации рисков,;Не стесняйтесь (вежливо и без троллфейса!) задавать им неудобные вопросы вроде тех, что были приведенны выше.;elaboration_r
а не то, что они не осилили православный LLVM. Скорее всего :);Это означает, что создатели языка подумали о минимизации рисков,;contrast_m
пока с технологией не поиграются другие;Подождите лет пять,;condition_r
и не соберут все-все-все грабли.;Подождите лет пять,;joint_m
Если после этого появятся саксесс сторис,;возможно, технология действительно чем-то интересна.;condition_r
возможно, технология действительно чем-то интересна.;Подождите лет пять,;sequence_m
После этого поиграйтесь еще немного в своих пет проджектах, затем на некритичных проектах на работе (например, в админке или интеграционных тестах).;Подождите лет пять,;sequence_m
Если все хорошо,;то можно постепенно, маленькими шажками, попробовать применить технологию уже там, где ходят пользователи.;condition_r
то можно постепенно, маленькими шажками, попробовать применить технологию уже там, где ходят пользователи.;Подождите лет пять,;sequence_m